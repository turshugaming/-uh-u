package com.terramonic;

import javafx.animation.*;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.concurrent.Task;
import javafx.geometry.*;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.effect.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Duration;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.nio.file.Path;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javafx.application.Platform;
import javafx.stage.Stage;

import static java.lang.Long.toHexString;

public class Main extends Application {
    // Constants
    private static final String VERSION_URL = "https://www.dropbox.com/scl/fi/bf507zy3c5adp9lyl6iye/version.txt?rlkey=9cd0ky00a1okgbf9w3jqizgxh&st=z1tdmze9&dl=1";
    private static final String ICON_URL = "https://www.dropbox.com/scl/fi/2yc75kqokrtivw202rt3w/icon.png?rlkey=1blmy791i17gs6t78ecjc3qxf&st=3qbijg3k&dl=1";
    private static final String FABRIC_INSTALLER_URL = "https://maven.fabricmc.net/net/fabricmc/fabric-installer/1.0.3/fabric-installer-1.0.3.jar";
    private static final String MINECRAFT_VERSION = "1.21.4";
    private static final String FABRIC_VERSION = "0.16.13";
    private static final String TERRAMONIC_DIR = System.getenv("APPDATA") + File.separator + ".terramonic";

    // Theme colors
    private static final Color PRIMARY_COLOR = Color.rgb(45, 200, 110);
    private static final Color SECONDARY_COLOR = Color.rgb(30, 150, 80);
    private static final Color ACCENT_COLOR = Color.rgb(220, 255, 220);
    private static final Color DARK_BG = Color.rgb(20, 20, 20);
    private static final Color MID_BG = Color.rgb(30, 30, 30);
    private static final Color LIGHT_BG = Color.rgb(40, 40, 40);

    // App State
    private Stage mainStage;
    private double xOffset, yOffset;
    private Scene splashScene, loginScene, mainScene;
    private BorderPane splashRoot, loginRoot, mainRoot;
    private Label statusLabel;
    private ProgressBar progressBar;
    private String username = "";
    private String launcherVersion = "1.0.0";
    private JSONObject versionData;
    private ExecutorService executor = Executors.newCachedThreadPool();
    private boolean maintenanceMode = false;
    private ImageView playerHead;
    private SimpleDoubleProperty allocatedRam = new SimpleDoubleProperty(2048);
    private boolean fullscreenMode = false;
    private Text newsText;
    private Label downloadStatusLabel;
    private ParallelTransition pulseAnimation;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        try {
            mainStage = primaryStage;
            mainStage.initStyle(StageStyle.UNDECORATED);
            mainStage.setTitle("TerraMonic Launcher");

            // Set up directories
            setupDirectories();

            // Create scenes
            createSplashScene();
            createLoginScene();
            createMainScene();

            // Show splash screen with animation
            mainStage.setScene(splashScene);
            mainStage.show();

            // Start initialization process
            initialize();
        } catch (Exception e) {
            showError("Initialization Error", e);
        }
    }

    private void setupDirectories() throws IOException {
        Files.createDirectories(Paths.get(TERRAMONIC_DIR));
    }

    private void addDragListeners() {
        mainStage.getScene().setOnMousePressed(event -> {
            xOffset = event.getSceneX();
            yOffset = event.getSceneY();
        });

        mainStage.getScene().setOnMouseDragged(event -> {
            mainStage.setX(event.getScreenX() - xOffset);
            mainStage.setY(event.getScreenY() - yOffset);
        });
    }


    private void createSplashScene() {
        splashRoot = new BorderPane();
        splashRoot.setStyle("-fx-background-color: linear-gradient(to right, #0a0a0a, #1a1a1a, #0a0a0a);");

        // Ana container (daha geniş yatay düzen)
        HBox mainContainer = new HBox(30);
        mainContainer.setAlignment(Pos.CENTER);
        mainContainer.setPadding(new Insets(30));
        mainContainer.setStyle("-fx-background-radius: 10;");

        // Sol taraf - Logo ve animasyonlu çerçeve
        StackPane logoContainer = new StackPane();
        logoContainer.setMinSize(100, 100);

        // Animasyonlu border
        Rectangle animatedBorder = new Rectangle(90, 90);
        animatedBorder.setFill(Color.TRANSPARENT);
        animatedBorder.setStroke(PRIMARY_COLOR);
        animatedBorder.setStrokeWidth(2);
        animatedBorder.setStrokeDashOffset(10);

        // Dash animasyonu
        Timeline borderAnimation = new Timeline(
                new KeyFrame(Duration.ZERO,
                        new KeyValue(animatedBorder.strokeDashOffsetProperty(), 10),
                        new KeyValue(animatedBorder.opacityProperty(), 0.7)
                ),
                new KeyFrame(Duration.seconds(2),
                        new KeyValue(animatedBorder.strokeDashOffsetProperty(), 0),
                        new KeyValue(animatedBorder.opacityProperty(), 1.0)
                )
        );
        borderAnimation.setCycleCount(Timeline.INDEFINITE);
        borderAnimation.setAutoReverse(true);

        // Logo (TM yazısı)
        Text logoText = new Text("TM");
        logoText.setFill(PRIMARY_COLOR);
        logoText.setFont(Font.font("Verdana", FontWeight.BOLD, 48));
        logoText.setEffect(new Glow(0.8));
        logoText.setId("terramonicLogo");

        logoContainer.getChildren().addAll(animatedBorder, logoText);
        borderAnimation.play();

        // Sağ taraf - Metin ve progress bar
        VBox textContainer = new VBox(15);
        textContainer.setAlignment(Pos.CENTER_LEFT);
        textContainer.setMinWidth(300);

        // TerraMonic yazısı
        Text titleText = new Text("TERRAMONIC");
        titleText.setFill(Color.WHITE);
        titleText.setFont(Font.font("Verdana", FontWeight.BOLD, 28));
        titleText.setEffect(new DropShadow(5, PRIMARY_COLOR));

        // Alt başlık
        Text subtitleText = new Text("Premium Minecraft Experience");
        subtitleText.setFill(Color.LIGHTGRAY);
        subtitleText.setFont(Font.font("Verdana", 14));

        // Progress bar container
        StackPane progressContainer = new StackPane();
        progressContainer.setPrefHeight(8);

        // Progress bar arkaplan
        Rectangle progressBg = new Rectangle(300, 8);
        progressBg.setFill(Color.rgb(50, 50, 50));
        progressBg.setArcHeight(8);
        progressBg.setArcWidth(8);

        // Progress bar
        progressBar = new ProgressBar(0);
        progressBar.setPrefWidth(300);
        progressBar.setPrefHeight(8);
        progressBar.setStyle("-fx-accent: " + toHexString(PRIMARY_COLOR) + ";");

        // Glow efekti
        progressBar.setEffect(new Glow(0.5));

        progressContainer.getChildren().addAll(progressBg, progressBar);

        // Status label (görünmez)
        statusLabel = new Label("Initializing...");
        statusLabel.setTextFill(Color.TRANSPARENT);

        textContainer.getChildren().addAll(titleText, subtitleText, progressContainer, statusLabel);

        // Tüm elemanları birleştir
        mainContainer.getChildren().addAll(logoContainer, textContainer);
        splashRoot.setCenter(mainContainer);

        // Sahne ayarları
        splashScene = new Scene(splashRoot, 500, 200); // Geniş yatay dikdörtgen
        splashScene.setFill(Color.TRANSPARENT);

        // Logo animasyonunu başlat
        startLogoAnimation();
    }

    private void startLogoAnimation() {
        if (pulseAnimation != null) {
            pulseAnimation.stop();
        }

        Node logo = splashRoot.lookup("#terramonicLogo");
        if (logo != null) {
            // 3D rotate efekti
            RotateTransition rotate = new RotateTransition(Duration.seconds(8), logo);
            rotate.setFromAngle(-5);
            rotate.setToAngle(5);
            rotate.setAxis(Rotate.Y_AXIS);
            rotate.setCycleCount(Animation.INDEFINITE);
            rotate.setInterpolator(Interpolator.EASE_BOTH);
            rotate.setAutoReverse(true);

            // Glow animasyonu
            Glow glow = new Glow(0.5);
            logo.setEffect(glow);

            Timeline glowTimeline = new Timeline(
                    new KeyFrame(Duration.ZERO, new KeyValue(glow.levelProperty(), 0.5)),
                    new KeyFrame(Duration.seconds(1.5), new KeyValue(glow.levelProperty(), 1.2)),
                    new KeyFrame(Duration.seconds(3), new KeyValue(glow.levelProperty(), 0.5))
            );
            glowTimeline.setCycleCount(Animation.INDEFINITE);

            // Rotate ve glow animasyonlarını birleştir
            ParallelTransition parallelTransition = new ParallelTransition(rotate, glowTimeline);
            pulseAnimation = parallelTransition; // pulseAnimation ParallelTransition tipinde olmalı
            pulseAnimation.play();
        }
    }

    private String toHexString(Color color) {
        int r = (int) (color.getRed() * 255);
        int g = (int) (color.getGreen() * 255);
        int b = (int) (color.getBlue() * 255);
        return String.format("#%02X%02X%02X", r, g, b);
    }


    private void createLoginScene() {
        loginRoot = new BorderPane();
        loginRoot.setStyle("-fx-background-color: linear-gradient(to bottom, #141414, #222222);");

        // Create left decoration panel with particles
        StackPane decorationPane = new StackPane();
        decorationPane.setPrefWidth(200);
        decorationPane.setStyle("-fx-background-color: linear-gradient(to bottom, #0a0a0a, #181818);");

        Rectangle sideRect = new Rectangle(200, 400);
        LinearGradient gradient = new LinearGradient(
                0, 0, 1, 1, true, CycleMethod.NO_CYCLE,
                new Stop(0, Color.rgb(30, 150, 80, 0.2)),
                new Stop(1, Color.rgb(45, 200, 110, 0.1))
        );
        sideRect.setFill(gradient);

        Group particles = createParticleEffect();

        ImageView logoImage = new ImageView();
        logoImage.setFitWidth(120);
        logoImage.setFitHeight(120);
        logoImage.setPreserveRatio(true);

        // Load icon image asynchronously
        loadIcon(logoImage);

        decorationPane.getChildren().addAll(sideRect, particles, logoImage);

        // Create login form
        VBox loginForm = new VBox(20);
        loginForm.setAlignment(Pos.CENTER);
        loginForm.setPadding(new Insets(30));
        loginForm.setMaxWidth(350);

        Text loginTitle = new Text("WELCOME");
        loginTitle.setFont(Font.font("Verdana", FontWeight.BOLD, 28));
        loginTitle.setFill(PRIMARY_COLOR);
        loginTitle.setEffect(new DropShadow(10, Color.BLACK));

        Text loginSubtitle = new Text("Enter your username to continue");
        loginSubtitle.setFont(Font.font("Verdana", 14));
        loginSubtitle.setFill(Color.LIGHTGRAY);

        // Username field with style
        TextField usernameField = new TextField();
        usernameField.setPromptText("Username");
        usernameField.setPrefHeight(40);
        usernameField.setMaxWidth(250);
        usernameField.setStyle(
                "-fx-background-color: " + toHexString(LIGHT_BG) + ";" +
                        "-fx-text-fill: white;" +
                        "-fx-prompt-text-fill: gray;" +
                        "-fx-background-radius: 5;" +
                        "-fx-border-color: " + toHexString(SECONDARY_COLOR) + ";" +
                        "-fx-border-radius: 5;" +
                        "-fx-border-width: 1;" +
                        "-fx-padding: 5 10 5 10;"
        );

        // Focus effect for username field
        usernameField.focusedProperty().addListener((obs, wasFocused, isFocused) -> {
            if (isFocused) {
                usernameField.setStyle(
                        "-fx-background-color: " + toHexString(LIGHT_BG) + ";" +
                                "-fx-text-fill: white;" +
                                "-fx-prompt-text-fill: gray;" +
                                "-fx-background-radius: 5;" +
                                "-fx-border-color: " + toHexString(PRIMARY_COLOR) + ";" +
                                "-fx-border-radius: 5;" +
                                "-fx-border-width: 2;" +
                                "-fx-padding: 5 10 5 10;"
                );
            } else {
                usernameField.setStyle(
                        "-fx-background-color: " + toHexString(LIGHT_BG) + ";" +
                                "-fx-text-fill: white;" +
                                "-fx-prompt-text-fill: gray;" +
                                "-fx-background-radius: 5;" +
                                "-fx-border-color: " + toHexString(SECONDARY_COLOR) + ";" +
                                "-fx-border-radius: 5;" +
                                "-fx-border-width: 1;" +
                                "-fx-padding: 5 10 5 10;"
                );
            }
        });

        // Cool login button
        Button loginButton = createCoolButton("PLAY NOW", 250, 45);

        loginForm.getChildren().addAll(loginTitle, loginSubtitle, usernameField, loginButton);

        // Add window controls
        HBox windowControls = createWindowControls();
        BorderPane.setAlignment(windowControls, Pos.TOP_RIGHT);
        BorderPane.setMargin(windowControls, new Insets(10));

        // Add all components to login screen
        loginRoot.setLeft(decorationPane);
        loginRoot.setCenter(loginForm);
        loginRoot.setRight(windowControls);

        loginScene = new Scene(loginRoot, 550, 400);
        loginScene.setFill(Color.TRANSPARENT);

        // Add event handler for login button
        loginButton.setOnAction(e -> {
            username = usernameField.getText().trim();
            if (username.isEmpty()) {
                shakeNode(usernameField);
                return;
            }

            // Transition to main scene with animation
            FadeTransition fadeOut = new FadeTransition(Duration.millis(500), loginRoot);
            fadeOut.setFromValue(1);
            fadeOut.setToValue(0);
            fadeOut.setOnFinished(event -> {
                mainStage.setScene(mainScene);

                // Ensure the main stage is the right size
                mainStage.setWidth(900);
                mainStage.setHeight(600);
                mainStage.centerOnScreen();

                // Load player head
                loadPlayerHead();

                // Show with animation
                mainRoot.setOpacity(0);

                // Staggered reveal animations
                revealMainScene();
            });
            fadeOut.play();
        });
    }

    private void shakeNode(TextField usernameField) {
        TranslateTransition shake = new TranslateTransition(Duration.millis(70), usernameField);
        shake.setFromX(0);
        shake.setByX(10);
        shake.setCycleCount(5);
        shake.setAutoReverse(true);
        shake.play();
    }

    private void openLink(String url) {
        try {
            java.awt.Desktop.getDesktop().browse(new URI(url));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showError(String title, Exception e) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle(title);
            alert.setHeaderText(e.getClass().getSimpleName());
            alert.setContentText(e.getMessage());
            alert.showAndWait();
        });
    }

    private void revealMainScene() {
        // Get UI components
        Node sidebar = mainRoot.getLeft();
        Node centerContent = mainRoot.getCenter();
        Node newsPanel = mainRoot.getRight();
        Node bottomBar = mainRoot.getBottom();

        // Initially hide all components
        sidebar.setOpacity(0);
        centerContent.setOpacity(0);
        newsPanel.setOpacity(0);
        bottomBar.setOpacity(0);

        mainRoot.setOpacity(1);

        // Staggered animations
        TranslateTransition sidebarSlide = new TranslateTransition(Duration.millis(400), sidebar);
        sidebarSlide.setFromX(-100);
        sidebarSlide.setToX(0);

        FadeTransition sidebarFade = new FadeTransition(Duration.millis(400), sidebar);
        sidebarFade.setFromValue(0);
        sidebarFade.setToValue(1);

        ParallelTransition sidebarAnim = new ParallelTransition(sidebarSlide, sidebarFade);

        TranslateTransition centerSlide = new TranslateTransition(Duration.millis(400), centerContent);
        centerSlide.setFromY(50);
        centerSlide.setToY(0);

        FadeTransition centerFade = new FadeTransition(Duration.millis(400), centerContent);
        centerFade.setFromValue(0);
        centerFade.setToValue(1);

        ParallelTransition centerAnim = new ParallelTransition(centerSlide, centerFade);

        TranslateTransition newsSlide = new TranslateTransition(Duration.millis(400), newsPanel);
        newsSlide.setFromX(100);
        newsSlide.setToX(0);

        FadeTransition newsFade = new FadeTransition(Duration.millis(400), newsPanel);
        newsFade.setFromValue(0);
        newsFade.setToValue(1);

        ParallelTransition newsAnim = new ParallelTransition(newsSlide, newsFade);

        FadeTransition bottomFade = new FadeTransition(Duration.millis(400), bottomBar);
        bottomFade.setFromValue(0);
        bottomFade.setToValue(1);

        // Build sequence
        SequentialTransition sequence = new SequentialTransition(
                sidebarAnim,
                centerAnim,
                newsAnim,
                bottomFade
        );

        sequence.play();
    }

    private void createMainScene() {
        mainRoot = new BorderPane();
        mainRoot.setStyle("-fx-background-color: linear-gradient(to bottom, #141414, #222222);");

        // Create left sidebar
        VBox sidebar = createSidebar();

        // Create center content
        VBox centerContent = new VBox(20);
        centerContent.setPadding(new Insets(20));
        centerContent.setAlignment(Pos.TOP_CENTER);

        // Welcome header
        HBox welcomeBox = new HBox(10);
        welcomeBox.setAlignment(Pos.CENTER_LEFT);

        Text welcomeText = new Text("Welcome to TerraMonic");
        welcomeText.setFont(Font.font("Verdana", FontWeight.BOLD, 24));
        welcomeText.setFill(PRIMARY_COLOR);

        welcomeBox.getChildren().add(welcomeText);

        // Game settings panel
        VBox settingsPanel = new VBox(20);
        settingsPanel.setPadding(new Insets(20));
        settingsPanel.setStyle(
                "-fx-background-color: " + toHexString(LIGHT_BG) + ";" +
                        "-fx-background-radius: 10;" +
                        "-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.4), 10, 0, 0, 5);"
        );

        Text settingsTitle = new Text("GAME SETTINGS");
        settingsTitle.setFont(Font.font("Verdana", FontWeight.BOLD, 16));
        settingsTitle.setFill(PRIMARY_COLOR);

        // RAM slider
        VBox ramBox = new VBox(10);

        HBox ramLabelBox = new HBox();
        Label ramLabel = new Label("Memory Allocation");
        ramLabel.setTextFill(Color.WHITE);
        ramLabel.setFont(Font.font("Verdana", 14));

        Label ramValueLabel = new Label();
        ramValueLabel.setTextFill(PRIMARY_COLOR);
        ramValueLabel.setFont(Font.font("Verdana", FontWeight.BOLD, 14));

        ramLabelBox.getChildren().addAll(ramLabel, new Region() {{
            HBox.setHgrow(this, Priority.ALWAYS);
        }}, ramValueLabel);

        // Calculate max RAM
        long maxRam = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax() / (1024 * 1024);
        maxRam = Math.min(maxRam, 16384); // Cap at 16GB

        // Create stylish slider
        Slider ramSlider = new Slider(1024, maxRam, 2048);
        ramSlider.valueProperty().bindBidirectional(allocatedRam);
        ramSlider.setShowTickMarks(true);
        ramSlider.setMajorTickUnit(1024);
        ramSlider.setBlockIncrement(512);
        ramSlider.setStyle(
                "-fx-control-inner-background: #2A2A2A;" +
                        "-fx-track-background: #2A2A2A;" +
                        "-fx-track: #2A2A2A;" +
                        "-fx-accent: " + toHexString(PRIMARY_COLOR) + ";"
        );

        ramValueLabel.textProperty().bind(allocatedRam.asString("%.0f MB"));

        // DÜZELTME: Thumb stilini güvenli şekilde ayarla
        ramSlider.skinProperty().addListener((obs, oldSkin, newSkin) -> {
            Node thumb = ramSlider.lookup(".thumb");
            if (thumb != null) {
                thumb.setStyle(
                        "-fx-background-color: linear-gradient(to bottom, #ffffff, " + toHexString(PRIMARY_COLOR) + ");" +
                                "-fx-background-radius: 50%;"
                );
            }
        });

        ramBox.getChildren().addAll(ramLabelBox, ramSlider);

        // Fullscreen option
        HBox fullscreenBox = new HBox(10);
        fullscreenBox.setAlignment(Pos.CENTER_LEFT);

        Label fullscreenLabel = new Label("Launch in Fullscreen");
        fullscreenLabel.setTextFill(Color.WHITE);
        fullscreenLabel.setFont(Font.font("Verdana", 14));

        CheckBox fullscreenCheckbox = new CheckBox();
        fullscreenCheckbox.selectedProperty().addListener((obs, oldVal, newVal) -> fullscreenMode = newVal);
        fullscreenCheckbox.setStyle("-fx-text-fill: white;");

        // Style checkbox
        fullscreenCheckbox.skinProperty().addListener((obs, oldSkin, newSkin) -> {
            Region box = (Region) fullscreenCheckbox.lookup(".box");
            if (box != null) {
                box.setStyle(
                        "-fx-background-color: #2A2A2A;" +
                                "-fx-border-color: " + toHexString(SECONDARY_COLOR) + ";" +
                                "-fx-border-radius: 3px;"
                );
            }
        });

        fullscreenBox.getChildren().addAll(fullscreenLabel, new Region() {{
            HBox.setHgrow(this, Priority.ALWAYS);
        }}, fullscreenCheckbox);

        // Custom server selection
        HBox serverBox = new HBox(10);
        serverBox.setAlignment(Pos.CENTER_LEFT);

        Label serverLabel = new Label("Server");
        serverLabel.setTextFill(Color.WHITE);
        serverLabel.setFont(Font.font("Verdana", 14));

        ComboBox<String> serverComboBox = new ComboBox<>();
        serverComboBox.getItems().addAll("play.terramonic.com", "blocksmc.com");
        serverComboBox.setValue("play.terramonic.com");
        serverComboBox.setStyle(
                "-fx-background-color: #2A2A2A;" +
                        "-fx-text-fill: white;" +
                        "-fx-font: 14px 'Verdana';" +
                        "-fx-border-color: " + toHexString(SECONDARY_COLOR) + ";" +
                        "-fx-border-radius: 3px;"
        );

        serverBox.getChildren().addAll(serverLabel, new Region() {{
            HBox.setHgrow(this, Priority.ALWAYS);
        }}, serverComboBox);

        // Add all to settings panel
        settingsPanel.getChildren().addAll(settingsTitle, ramBox, fullscreenBox, serverBox);

        // Version info
        HBox versionBox = new HBox(10);
        versionBox.setAlignment(Pos.CENTER);
        versionBox.setStyle(
                "-fx-background-color: " + toHexString(MID_BG) + ";" +
                        "-fx-background-radius: 5;" +
                        "-fx-padding: 10;"
        );

        Text versionInfo = new Text("Minecraft " + MINECRAFT_VERSION + " • Fabric " + FABRIC_VERSION);
        versionInfo.setFill(Color.LIGHTGRAY);
        versionInfo.setFont(Font.font("Verdana", 12));

        versionBox.getChildren().add(versionInfo);

        // Add all to center content
        centerContent.getChildren().addAll(welcomeBox, settingsPanel, versionBox);

        // Create right news panel
        VBox newsPanel = createNewsPanel();

        // Create bottom status bar
        HBox bottomBar = new HBox(10);
        bottomBar.setPadding(new Insets(10, 20, 10, 20));
        bottomBar.setStyle("-fx-background-color: " + toHexString(MID_BG) + ";");
        bottomBar.setAlignment(Pos.CENTER_LEFT);

        downloadStatusLabel = new Label("");
        downloadStatusLabel.setTextFill(Color.LIGHTGRAY);

        Region bottomSpacer = new Region();
        HBox.setHgrow(bottomSpacer, Priority.ALWAYS);

        Button playButton = createPlayButton();

        bottomBar.getChildren().addAll(downloadStatusLabel, bottomSpacer, playButton);

        // Add window controls
        HBox windowControls = createWindowControls();
        BorderPane.setAlignment(windowControls, Pos.TOP_RIGHT);
        BorderPane.setMargin(windowControls, new Insets(10));

        // Add all components to main scene
        mainRoot.setLeft(sidebar);
        mainRoot.setCenter(centerContent);
        mainRoot.setRight(newsPanel);
        mainRoot.setBottom(bottomBar);
        mainRoot.setTop(windowControls);

        mainScene = new Scene(mainRoot, 900, 600);
        mainScene.setFill(Color.TRANSPARENT);

        // Add drag listeners to main scene
        mainScene.setOnMousePressed(event -> {
            xOffset = event.getSceneX();
            yOffset = event.getSceneY();
        });

        mainScene.setOnMouseDragged(event -> {
            mainStage.setX(event.getScreenX() - xOffset);
            mainStage.setY(event.getScreenY() - yOffset);
        });
    }

    private VBox createSidebar() {
        VBox sidebar = new VBox(15);
        sidebar.setPrefWidth(200);
        sidebar.setPadding(new Insets(20, 10, 20, 20));
        sidebar.setStyle("-fx-background-color: " + toHexString(DARK_BG) + ";");

        // Logo section
        HBox logoBox = new HBox(10);
        logoBox.setAlignment(Pos.CENTER_LEFT);

        ImageView logoImage = new ImageView();
        logoImage.setFitWidth(40);
        logoImage.setFitHeight(40);
        logoImage.setPreserveRatio(true);

        // Load icon image asynchronously
        loadIcon(logoImage);

        Text logoText = new Text("TerraMonic");
        logoText.setFont(Font.font("Verdana", FontWeight.BOLD, 18));
        logoText.setFill(PRIMARY_COLOR);

        logoBox.getChildren().addAll(logoImage, logoText);

        // User info section
        VBox userBox = new VBox(10);
        userBox.setPadding(new Insets(20, 0, 20, 0));
        userBox.setAlignment(Pos.CENTER);

        playerHead = new ImageView();
        playerHead.setFitWidth(80);
        playerHead.setFitHeight(80);
        playerHead.setPreserveRatio(true);

        // Add circle clip for player head
        Circle clip = new Circle(40);
        clip.setCenterX(40);
        clip.setCenterY(40);
        playerHead.setClip(clip);

        // Add glow effect around head
        DropShadow glow = new DropShadow();
        glow.setColor(PRIMARY_COLOR);
        glow.setRadius(15);
        playerHead.setEffect(glow);

        Text usernameText = new Text(username);
        usernameText.setFont(Font.font("Verdana", FontWeight.BOLD, 16));
        usernameText.setFill(Color.WHITE);

        userBox.getChildren().addAll(playerHead, usernameText);

        // Navigation menu
        VBox menuBox = new VBox(5);
        menuBox.setPadding(new Insets(10, 0, 10, 0));

        String[] menuItems = {"Home", "Mods", "Resource Packs", "Settings"};

        for (String item : menuItems) {
            HBox menuItem = new HBox(10);
            menuItem.setPadding(new Insets(8, 10, 8, 10));
            menuItem.setAlignment(Pos.CENTER_LEFT);

            Rectangle highlight = new Rectangle(5, 30);
            highlight.setArcWidth(5);
            highlight.setArcHeight(5);
            highlight.setFill(Color.TRANSPARENT);

            Text itemText = new Text(item);
            itemText.setFont(Font.font("Verdana", 14));
            itemText.setFill(Color.LIGHTGRAY);

            menuItem.getChildren().addAll(highlight, itemText);

            // Hover effect
            menuItem.setOnMouseEntered(e -> {
                highlight.setFill(PRIMARY_COLOR);
                itemText.setFill(Color.WHITE);
                menuItem.setCursor(javafx.scene.Cursor.HAND);

                // Scale animation
                ScaleTransition scale = new ScaleTransition(Duration.millis(100), menuItem);
                scale.setToX(1.05);
                scale.setToY(1.05);
                scale.play();
            });

            menuItem.setOnMouseExited(e -> {
                highlight.setFill(Color.TRANSPARENT);
                itemText.setFill(Color.LIGHTGRAY);

                // Scale back
                ScaleTransition scale = new ScaleTransition(Duration.millis(100), menuItem);
                scale.setToX(1.0);
                scale.setToY(1.0);
                scale.play();
            });

            menuItem.setOnMouseClicked(e -> {
                // Handle menu selection
                // For now just highlight it
                for (Node node : menuBox.getChildren()) {
                    HBox item2 = (HBox) node;
                    ((Rectangle) item2.getChildren().get(0)).setFill(Color.TRANSPARENT);
                    ((Text) item2.getChildren().get(1)).setFill(Color.LIGHTGRAY);
                }

                highlight.setFill(PRIMARY_COLOR);
                itemText.setFill(Color.WHITE);
            });

            menuBox.getChildren().add(menuItem);
        }

        // Version info
        Region spacer = new Region();
        VBox.setVgrow(spacer, Priority.ALWAYS);

        HBox versionInfo = new HBox();
        versionInfo.setAlignment(Pos.CENTER);

        Text versionText = new Text("Launcher v" + launcherVersion);
        versionText.setFont(Font.font("Verdana", 12));
        versionText.setFill(Color.GRAY);

        versionInfo.getChildren().add(versionText);

        // Add all to sidebar
        sidebar.getChildren().addAll(logoBox, userBox, menuBox, spacer, versionInfo);

        return sidebar;
    }

    private VBox createNewsPanel() {
        VBox newsPanel = new VBox(15);
        newsPanel.setPrefWidth(250);
        newsPanel.setPadding(new Insets(20));
        newsPanel.setStyle(
                "-fx-background-color: " + toHexString(MID_BG) + ";" +
                        "-fx-background-radius: 10 0 0 0;"
        );

        // News header
        Text newsHeader = new Text("Latest News");
        newsHeader.setFont(Font.font("Verdana", FontWeight.BOLD, 18));
        newsHeader.setFill(PRIMARY_COLOR);

        // News items scroll pane
        ScrollPane newsScroll = new ScrollPane();
        newsScroll.setFitToWidth(true);
        newsScroll.setStyle(
                "-fx-background: transparent;" +
                        "-fx-background-color: transparent;" +
                        "-fx-padding: 0;" +
                        "-fx-border-color: transparent;"
        );

        VBox newsItems = new VBox(15);
        newsItems.setPadding(new Insets(10, 5, 10, 5));

        // We'll load news from the version data later
        newsText = new Text("Loading news...");
        newsText.setFill(Color.LIGHTGRAY);
        newsText.setFont(Font.font("Verdana", 14));
        newsText.setWrappingWidth(210);

        newsItems.getChildren().add(newsText);
        newsScroll.setContent(newsItems);

        // Discord link
        HBox discordBox = new HBox(10);
        discordBox.setAlignment(Pos.CENTER);
        discordBox.setPadding(new Insets(10));
        discordBox.setStyle(
                "-fx-background-color: " + toHexString(LIGHT_BG) + ";" +
                        "-fx-background-radius: 5;"
        );

        Text discordText = new Text("Join Our Discord");
        discordText.setFont(Font.font("Verdana", FontWeight.BOLD, 14));
        discordText.setFill(Color.WHITE);

        discordBox.getChildren().add(discordText);

        // Hover effect for Discord button
        discordBox.setOnMouseEntered(e -> {
            discordBox.setStyle(
                    "-fx-background-color: " + toHexString(PRIMARY_COLOR) + ";" +
                            "-fx-background-radius: 5;" +
                            "-fx-cursor: hand;"
            );
            discordText.setFill(Color.BLACK);
        });

        discordBox.setOnMouseExited(e -> {
            discordBox.setStyle(
                    "-fx-background-color: " + toHexString(LIGHT_BG) + ";" +
                            "-fx-background-radius: 5;"
            );
            discordText.setFill(Color.WHITE);
        });

        discordBox.setOnMouseClicked(e -> openLink("https://discord.gg/terramonic"));

        // Add all to news panel
        newsPanel.getChildren().addAll(newsHeader, newsScroll, discordBox);

        VBox.setVgrow(newsScroll, Priority.ALWAYS);

        return newsPanel;
    }


    private HBox createWindowControls() {
        HBox controls = new HBox(10);
        controls.setAlignment(Pos.CENTER_RIGHT);

        // Minimize button
        Button minimizeBtn = new Button("-");
        styleWindowButton(minimizeBtn);
        minimizeBtn.setOnAction(e -> mainStage.setIconified(true));

        // Close button
        Button closeBtn = new Button("×");
        styleWindowButton(closeBtn);
        closeBtn.setStyle(closeBtn.getStyle() + "-fx-text-fill: white;");
        closeBtn.setOnMouseEntered(e -> closeBtn.setStyle(closeBtn.getStyle() + "-fx-background-color: #e81123;"));
        closeBtn.setOnMouseExited(e -> styleWindowButton(closeBtn));

        closeBtn.setOnAction(e -> {
            if (executor != null) {
                executor.shutdownNow();
            }
            Platform.exit();
        });

        controls.getChildren().addAll(minimizeBtn, closeBtn);
        return controls;
    }

    private void styleWindowButton(Button button) {
        button.setStyle(
                "-fx-background-color: transparent;" +
                        "-fx-text-fill: #cccccc;" +
                        "-fx-font-size: 16px;" +
                        "-fx-padding: 3px 10px;" +
                        "-fx-cursor: hand;"
        );

        button.setOnMouseEntered(e -> {
            button.setStyle(
                    "-fx-background-color: #404040;" +
                            "-fx-text-fill: white;" +
                            "-fx-font-size: 16px;" +
                            "-fx-padding: 3px 10px;"
            );
        });

        button.setOnMouseExited(e -> {
            button.setStyle(
                    "-fx-background-color: transparent;" +
                            "-fx-text-fill: #cccccc;" +
                            "-fx-font-size: 16px;" +
                            "-fx-padding: 3px 10px;"
            );
        });
    }

    private Button createCoolButton(String text, double width, double height) {
        Button button = new Button(text);
        button.setPrefSize(width, height);
        button.setStyle(
                "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR) + ", " + toHexString(SECONDARY_COLOR) + ");" +
                        "-fx-text-fill: white;" +
                        "-fx-font-weight: bold;" +
                        "-fx-font-size: 14px;" +
                        "-fx-background-radius: 5;" +
                        "-fx-cursor: hand;"
        );

        button.setOnMouseEntered(e -> {
            button.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR.brighter()) + ", " + toHexString(SECONDARY_COLOR.brighter()) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 14px;" +
                            "-fx-background-radius: 5;" +
                            "-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.4), 10, 0, 0, 5);"
            );
        });

        button.setOnMouseExited(e -> {
            button.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR) + ", " + toHexString(SECONDARY_COLOR) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 14px;" +
                            "-fx-background-radius: 5;"
            );
        });

        button.setOnMousePressed(e -> {
            button.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(SECONDARY_COLOR) + ", " + toHexString(PRIMARY_COLOR) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 14px;" +
                            "-fx-background-radius: 5;" +
                            "-fx-translate-y: 1px;"
            );
        });

        button.setOnMouseReleased(e -> {
            button.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR) + ", " + toHexString(SECONDARY_COLOR) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 14px;" +
                            "-fx-background-radius: 5;"
            );
        });

        return button;
    }

    private Button createPlayButton() {
        Button playButton = new Button("PLAY");
        playButton.setPrefSize(120, 40);

        // Create glowing border with animation
        Rectangle border = new Rectangle(120, 40);
        border.setArcWidth(5);
        border.setArcHeight(5);
        border.setFill(Color.TRANSPARENT);
        border.setStroke(PRIMARY_COLOR);
        border.setStrokeWidth(2);

        // Create play button style
        playButton.setStyle(
                "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR) + ", " + toHexString(SECONDARY_COLOR) + ");" +
                        "-fx-text-fill: white;" +
                        "-fx-font-weight: bold;" +
                        "-fx-font-size: 16px;" +
                        "-fx-background-radius: 5;" +
                        "-fx-cursor: hand;"
        );

        StackPane buttonStack = new StackPane(border, playButton);

        // Create glow animation
        Timeline timeline = new Timeline(
                new KeyFrame(Duration.ZERO, new KeyValue(border.strokeProperty(), PRIMARY_COLOR)),
                new KeyFrame(Duration.seconds(1.5), new KeyValue(border.strokeProperty(), PRIMARY_COLOR.brighter()))
        );
        timeline.setAutoReverse(true);
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();

        // Create button hover effects
        playButton.setOnMouseEntered(e -> {
            playButton.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR.brighter()) + ", " + toHexString(SECONDARY_COLOR.brighter()) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 16px;" +
                            "-fx-background-radius: 5;"
            );

            ScaleTransition scale = new ScaleTransition(Duration.millis(100), buttonStack);
            scale.setToX(1.05);
            scale.setToY(1.05);
            scale.play();
        });

        playButton.setOnMouseExited(e -> {
            playButton.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR) + ", " + toHexString(SECONDARY_COLOR) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 16px;" +
                            "-fx-background-radius: 5;"
            );

            ScaleTransition scale = new ScaleTransition(Duration.millis(100), buttonStack);
            scale.setToX(1.0);
            scale.setToY(1.0);
            scale.play();
        });

        playButton.setOnMousePressed(e -> {
            playButton.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(SECONDARY_COLOR) + ", " + toHexString(PRIMARY_COLOR) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 16px;" +
                            "-fx-background-radius: 5;" +
                            "-fx-translate-y: 1px;"
            );
        });

        playButton.setOnMouseReleased(e -> {
            playButton.setStyle(
                    "-fx-background-color: linear-gradient(to bottom, " + toHexString(PRIMARY_COLOR) + ", " + toHexString(SECONDARY_COLOR) + ");" +
                            "-fx-text-fill: white;" +
                            "-fx-font-weight: bold;" +
                            "-fx-font-size: 16px;" +
                            "-fx-background-radius: 5;"
            );
        });

        // Set play button action
        playButton.setOnAction(e -> launchGame());

        return playButton;
    }

    private Group createParticleEffect() {
        Group particles = new Group();
        Random random = new Random();

        // Create particles
        for (int i = 0; i < 25; i++) {
            Circle particle = new Circle(random.nextDouble() * 3 + 1);
            particle.setFill(PRIMARY_COLOR.deriveColor(0, 1, 1, 0.6));
            particle.setTranslateX(random.nextDouble() * 200);
            particle.setTranslateY(random.nextDouble() * 400);

            // Create floating animation
            double duration = random.nextDouble() * 10 + 5;
            double startY = particle.getTranslateY();
            double range = random.nextDouble() * 30 + 10;

            KeyValue kv1 = new KeyValue(particle.translateYProperty(), startY - range / 2, Interpolator.EASE_BOTH);
            KeyValue kv2 = new KeyValue(particle.translateYProperty(), startY + range / 2, Interpolator.EASE_BOTH);
            KeyFrame kf1 = new KeyFrame(Duration.ZERO, kv1);
            KeyFrame kf2 = new KeyFrame(Duration.seconds(duration), kv2);

            Timeline timeline = new Timeline(kf1, kf2);
            timeline.setCycleCount(Timeline.INDEFINITE);
            timeline.setAutoReverse(true);
            timeline.play();

            // Add pulse animation
            double pulseDuration = random.nextDouble() * 4 + 2;
            FadeTransition fade = new FadeTransition(Duration.seconds(pulseDuration), particle);
            fade.setFromValue(0.2);
            fade.setToValue(0.8);
            fade.setCycleCount(Timeline.INDEFINITE);
            fade.setAutoReverse(true);
            fade.play();

            particles.getChildren().add(particle);
        }

        return particles;
    }

    private void initialize() {
        Task<Void> initTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    updateStatus(0.1, "Checking for updates...");
                    checkVersion(); // Artık hata fırlatmayacak

                    updateStatus(0.3, "Preparing game assets...");
                    downloadAssets();

                    updateStatus(0.6, "Setting up Fabric...");
                    setupFabric();

                    updateStatus(0.9, "Loading news...");
                    loadNews();

                    updateStatus(1.0, "Ready to play!");

                    if (maintenanceMode) {
                        Platform.runLater(() -> showMaintenanceAlert());
                    }

                    Platform.runLater(() -> transitionToLoginScene());
                } catch (Exception e) {
                    Platform.runLater(() -> {
                        showError("Initialization Error", e);
                        transitionToLoginScene(); // Hata olsa bile login ekranına geç
                    });
                }
                return null;
            }
        };
        executor.submit(initTask);
    }

    private void showMaintenanceAlert() {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Maintenance Mode");
        alert.setHeaderText("Server Maintenance");
        alert.setContentText("TerraMonic is currently under maintenance. Some features may be limited.");

        // Stil ayarları
        DialogPane dialogPane = alert.getDialogPane();
        dialogPane.setStyle("-fx-background-color: #2A2A2A;");
        dialogPane.lookup(".content.label").setStyle("-fx-text-fill: white;");

        alert.show();
    }

    private void transitionToLoginScene() {
        FadeTransition fade = new FadeTransition(Duration.millis(500), splashRoot);
        fade.setFromValue(1);
        fade.setToValue(0);
        fade.setOnFinished(e -> {
            mainStage.setScene(loginScene);
            mainStage.setWidth(550);
            mainStage.setHeight(400);
            mainStage.centerOnScreen();
            addDragListeners();
        });
        fade.play();
    }

    private void checkVersion() throws Exception {
        try {
            String versionJson = downloadString(VERSION_URL);
            versionData = new JSONObject(versionJson);

            // Güvenli versiyon kontrolü
            String latestVersion = versionData.optString("latestVersion", launcherVersion);
            maintenanceMode = versionData.optBoolean("maintenanceMode", false);

            // DÜZELTME: Parantez hatası giderildi
            if (!latestVersion.equals(launcherVersion)) {
                Platform.runLater(() -> showUpdateDialog(latestVersion));
            }

        } catch (Exception e) {
            versionData = new JSONObject();
            versionData.put("latestVersion", launcherVersion);
            versionData.put("maintenanceMode", false);
            System.err.println("Version check failed: " + e.getMessage());
        }
    }

    private void downloadAssets() {
        // This would download required game assets
        // Simulated for now
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void setupFabric() {
        // Check if Fabric is already installed
        Path fabricJsonPath = Paths.get(TERRAMONIC_DIR, "versions", MINECRAFT_VERSION + "-fabric" + FABRIC_VERSION, MINECRAFT_VERSION + "-fabric" + FABRIC_VERSION + ".json");

        if (!Files.exists(fabricJsonPath)) {
            try {
                // Download Fabric installer
                Path installerPath = Paths.get(TERRAMONIC_DIR, "fabric-installer.jar");
                downloadFile(FABRIC_INSTALLER_URL, installerPath.toString());

                // Run installer
                ProcessBuilder processBuilder = new ProcessBuilder(
                        "java",
                        "-jar", installerPath.toString(),
                        "client",
                        "-mcversion", MINECRAFT_VERSION,
                        "-loader", FABRIC_VERSION,
                        "-dir", TERRAMONIC_DIR
                );

                Process process = processBuilder.start();
                process.waitFor();

                // Clean up installer
                Files.deleteIfExists(installerPath);

            } catch (Exception e) {
                e.printStackTrace();
                // Show error but continue
                Platform.runLater(() -> showError("Fabric Setup Error", e));
            }
        }
    }

    private void loadNews() {
        if (versionData != null && versionData.has("news")) {
            try {
                JSONArray newsArray = versionData.getJSONArray("news");
                StringBuilder newsBuilder = new StringBuilder();

                for (int i = 0; i < newsArray.length(); i++) {
                    JSONObject newsItem = newsArray.getJSONObject(i);
                    String title = newsItem.getString("title");
                    String content = newsItem.getString("content");

                    newsBuilder.append("• ").append(title).append("\n");
                    newsBuilder.append(content).append("\n\n");
                }

                String newsContent = newsBuilder.toString().trim();

                Platform.runLater(() -> {
                    if (newsText != null) {
                        newsText.setText(newsContent);
                    }
                });

            } catch (Exception e) {
                e.printStackTrace();
                Platform.runLater(() -> {
                    if (newsText != null) {
                        newsText.setText("Failed to load news. Check your internet connection.");
                    }
                });
            }
        } else {
            Platform.runLater(() -> {
                if (newsText != null) {
                    newsText.setText("• Welcome to TerraMonic!\n\nCheck back here for updates and announcements.");
                }
            });
        }
    }

    private void loadPlayerHead() {
        if (playerHead != null && !username.isEmpty()) {
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    try {
                        // Try to load player skin from Minecraft API
                        String playerHeadUrl = "https://crafatar.com/avatars/" + username + "?size=80&overlay";
                        Image headImage = new Image(playerHeadUrl);

                        Platform.runLater(() -> {
                            playerHead.setImage(headImage);
                        });

                    } catch (Exception e) {
                        e.printStackTrace();
                        // Use default head if failed
                    }
                    return null;
                }
            };

            executor.submit(task);
        }
    }

    private void loadIcon(ImageView imageView) {
        Task<Void> task = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    // Try to load from local file first
                    Path iconPath = Paths.get(TERRAMONIC_DIR, "icon.png");

                    if (!Files.exists(iconPath)) {
                        // Download icon from URL
                        downloadFile(ICON_URL, iconPath.toString());
                    }

                    // Load the image
                    Image iconImage = new Image(new FileInputStream(iconPath.toFile()));

                    Platform.runLater(() -> {
                        imageView.setImage(iconImage);
                        mainStage.getIcons().add(iconImage);
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                    // Continue without icon if failed
                }
                return null;
            }
        };

        executor.submit(task);
    }

    private void launchGame() {
        // Create cool launch animation
        fadeOutContent();

        // Start game launch process
        Task<Void> launchTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    updateDownloadStatus("Preparing to launch game...");

                    // Create launch command
                    List<String> command = new ArrayList<>();
                    command.add("javaw");
                    command.add("-Xmx" + allocatedRam.get() + "M");

                    // Add Minecraft and Fabric parameters
                    command.add("-jar");
                    command.add(TERRAMONIC_DIR + "/versions/" + MINECRAFT_VERSION + "-fabric" + FABRIC_VERSION + "/" + MINECRAFT_VERSION + "-fabric" + FABRIC_VERSION + ".jar");

                    // Add username
                    command.add("--username");
                    command.add(username);

                    // Add fullscreen parameter if enabled
                    if (fullscreenMode) {
                        command.add("--fullscreen");
                    }

                    updateDownloadStatus("Starting Minecraft...");

                    // Start the process
                    ProcessBuilder processBuilder = new ProcessBuilder(command);
                    processBuilder.directory(new File(TERRAMONIC_DIR));
                    Process process = processBuilder.start();

                    // Close launcher after successful launch
                    Platform.runLater(() -> {
                        // Wait briefly before shutting down
                        try {
                            Thread.sleep(3000);
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                        }

                        Platform.exit();
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                    Platform.runLater(() -> {
                        fadeInContent();
                        showError("Launch Error", e);
                    });
                }

                return null;
            }
        };

        executor.submit(launchTask);
    }

    private void fadeOutContent() {
        FadeTransition fade = new FadeTransition(Duration.millis(500), mainRoot);
        fade.setFromValue(1);
        fade.setToValue(0.3);
        fade.play();
    }

    private void fadeInContent() {
        FadeTransition fade = new FadeTransition(Duration.millis(500), mainRoot);
        fade.setFromValue(0.3);
        fade.setToValue(1);
        fade.play();
    }

    private void updateStatus(double progress, String status) {
        Platform.runLater(() -> {
            progressBar.setProgress(progress);
            statusLabel.setText(status);
        });
    }

    private void updateDownloadStatus(String status) {
        Platform.runLater(() -> {
            downloadStatusLabel.setText(status);
        });
    }

    private String downloadString(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {

            StringBuilder response = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                response.append(line).append("\n");
            }

            return response.toString();
        }
    }

    private void downloadFile(String urlStr, String destination) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        try (InputStream in = connection.getInputStream();
             FileOutputStream out = new FileOutputStream(destination)) {

            byte[] buffer = new byte[8192];
            int bytesRead;

            while ((bytesRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
        }
    }

    private void showUpdateDialog(String latestVersion) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Update Available");
            alert.setHeaderText("New Launcher Version Available");
            alert.setContentText(
                    "A new version of TerraMonic Launcher (v" + latestVersion + ") is available. " +
                            "You are currently running v" + launcherVersion + ". Would you like to update now?"
            );

            // Style the dialog to match the launcher theme
            DialogPane dialogPane = alert.getDialogPane();
            dialogPane.setStyle(
                    "-fx-background-color: " + toHexString(DARK_BG) + ";" +
                            "-fx-text-fill: white;" +
                            "-fx-font-family: 'Verdana';"
            );

            // Customize button styles
            ButtonBar buttonBar = (ButtonBar) dialogPane.lookup(".button-bar");
            if (buttonBar != null) {
                buttonBar.setStyle("-fx-background-color: " + toHexString(DARK_BG) + ";");
                for (Node node : buttonBar.getButtons()) {
                    Button button = (Button) node;
                    button.setStyle(
                            "-fx-background-color: " + toHexString(PRIMARY_COLOR) + ";" +
                                    "-fx-text-fill: white;" +
                                    "-fx-font-weight: bold;" +
                                    "-fx-background-radius: 5;" +
                                    "-fx-cursor: hand;"
                    );
                    button.setOnMouseEntered(e -> button.setStyle(
                            "-fx-background-color: " + toHexString(PRIMARY_COLOR.brighter()) + ";" +
                                    "-fx-text-fill: white;" +
                                    "-fx-font-weight: bold;" +
                                    "-fx-background-radius: 5;"
                    ));
                    button.setOnMouseExited(e -> button.setStyle(
                            "-fx-background-color: " + toHexString(PRIMARY_COLOR) + ";" +
                                    "-fx-text-fill: white;" +
                                    "-fx-font-weight: bold;" +
                                    "-fx-background-radius: 5;"
                    ));
                }
            }

            // Create custom buttons
            ButtonType updateButton = new ButtonType("Update Now", ButtonBar.ButtonData.OK_DONE);
            ButtonType skipButton = new ButtonType("Skip", ButtonBar.ButtonData.CANCEL_CLOSE);
            alert.getButtonTypes().setAll(updateButton, skipButton);

            // Show dialog and handle response
            Optional<ButtonType> result = alert.showAndWait();
            if (result.isPresent() && result.get() == updateButton) {
                // Start update process
                initiateUpdate(latestVersion);
            }
        });
    }

    private void initiateUpdate(String latestVersion) {
        Task<Void> updateTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    updateStatus(0.0, "Preparing to update launcher...");

                    // Get update URL from version data
                    String updateUrl = versionData.optString("updateUrl", "");
                    if (updateUrl.isEmpty()) {
                        throw new IOException("Update URL not provided in version data.");
                    }

                    // Download the new launcher version
                    Path updatePath = Paths.get(TERRAMONIC_DIR, "launcher-update.zip");
                    updateStatus(0.3, "Downloading update...");
                    downloadFile(updateUrl, updatePath.toString());

                    // Extract and replace launcher files
                    updateStatus(0.7, "Installing update...");
                    extractUpdate(updatePath);

                    // Clean up
                    Files.deleteIfExists(updatePath);
                    updateStatus(1.0, "Update complete! Restarting...");

                    // Restart launcher
                    Platform.runLater(() -> {
                        try {
                            // Launch new version (simplified; actual implementation depends on launcher packaging)
                            String javaBin = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
                            String jarPath = new File(Main.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
                            new ProcessBuilder(javaBin, "-jar", jarPath).start();

                            // Close current instance
                            Platform.exit();
                        } catch (Exception e) {
                            showError("Update Restart Error", e);
                        }
                    });

                } catch (Exception e) {
                    e.printStackTrace();
                    Platform.runLater(() -> showError("Update Error", e));
                }
                return null;
            }
        };

        executor.submit(updateTask);
    }


    private void extractUpdate(Path zipPath) throws IOException {
        // Extract update zip to launcher directory
        try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zipPath))) {
            ZipEntry entry;
            byte[] buffer = new byte[8192];
            while ((entry = zis.getNextEntry()) != null) {
                if (entry.isDirectory()) {
                    continue;
                }

                Path outPath = Paths.get(TERRAMONIC_DIR, entry.getName());
                Files.createDirectories(outPath.getParent());

                try (FileOutputStream fos = new FileOutputStream(outPath.toFile())) {
                    int len;
                    while ((len = zis.read(buffer)) > 0) {
                        fos.write(buffer, 0, len);
                    }
                }
            }
        }
    }
}
