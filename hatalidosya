package com.terramonic.launcher;

import javafx.animation.*;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.geometry.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.effect.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.*;
import javafx.stage.*;
import javafx.util.Duration;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.*;
import java.net.*;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class Main extends Application {

    // Constants
    private static final String APP_NAME = "TerraMonic";
    private static final String APP_DATA = System.getenv("APPDATA") + "/.terramonic";
    private static final String MC_VERSION = "1.21.4";
    private static final String FABRIC_VERSION = "0.16.14";
    private static final String GAME_JAR = "fabric-loader-" + FABRIC_VERSION + "-" + MC_VERSION + ".jar";
    private static final String MINECRAFT_DIR = APP_DATA;
    private static final String VERSION_JSON = "https://www.dropbox.com/scl/fi/u7aebmab7drw6syltdw9u/version.json?rlkey=u2ferprl7izcsa3c6we24blxc&st=gvli5gjt&dl=1";
    private static final String ICON_URL = "https://www.dropbox.com/scl/fi/2yc75kqokrtivw202rt3w/icon.png?rlkey=1blmy791i17gs6t78ecjc3qxf&st=3gb5vyf1&dl=1";
    private static final String MINECRAFT_MANIFEST_URL = "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json";
    private static final String FABRIC_INSTALLER_URL = "https://maven.fabricmc.net/net/fabricmc/fabric-installer/0.11.2/fabric-installer-0.11.2.jar";

    // Colors (Green-themed palette)
    private static final Color PRIMARY_COLOR = Color.web("#2ecc71"); // Bright green
    private static final Color PRIMARY_COLOR_DARK = Color.web("#27ae60"); // Darker green
    private static final Color SECONDARY_COLOR = Color.web("#1abc9c"); // Teal-green
    private static final Color ACCENT_COLOR = Color.web("#16a085"); // Deep green
    private static final Color ERROR_COLOR = Color.web("#e74c3c");
    private static final Color WARNING_COLOR = Color.web("#f39c12");
    private static final Color BG_DARK = Color.web("#0f0f1a");
    private static final Color BG_DARKER = Color.web("#080812");
    private static final Color TEXT_COLOR = Color.web("#ecf0f1");

    // UI Components
    private StackPane root;
    private Stage primaryStage;
    private TextField usernameField;
    private ImageView playerHead;
    private ProgressBar progressBar;
    private Label statusLabel;
    private TextArea consoleArea;
    private ComboBox<String> ramComboBox;
    private CheckBox fullscreenCheck;
    private ComboBox<String> resolutionComboBox;
    private Button playBtn;
    private AtomicBoolean isGameRunning = new AtomicBoolean(false);
    private VBox newsItemsContainer;

    // Data
    private JSONObject versionData;
    private String currentVersion = "1.0.0";
    private Properties config;
    private ExecutorService executorService;
    private boolean offlineMode = false;
    private String minecraftVersionJson;
    private final Map<String, String> minecraftLibraries = new HashMap<>();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        try {
            this.primaryStage = primaryStage;
            executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

            // Initialize newsItemsContainer early
            newsItemsContainer = new VBox(15);
            newsItemsContainer.setAlignment(Pos.TOP_LEFT);
            newsItemsContainer.setPadding(new Insets(5));

            loadConfig();
            setupStage();
            setupInternalStylesheet();
            showSplashScreen();

            createAppDataFolder();

            PauseTransition pause = new PauseTransition(Duration.seconds(0.5));
            pause.setOnFinished(e -> checkForUpdates());
            pause.play();

            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
            showError("Launcher başlatma hatası: " + e.getMessage());
        }
    }

    @Override
    public void stop() {
        saveConfig();
        executorService.shutdown();
        Platform.exit();
        System.exit(0);
    }

    //region Configuration Management
    private void loadConfig() {
        config = new Properties();
        Path configFile = Paths.get(APP_DATA + "/launcher.properties");
        try {
            if (Files.exists(configFile)) {
                try (FileInputStream fis = new FileInputStream(configFile.toFile())) {
                    config.load(fis);
                }
            } else {
                config.setProperty("ram", "4");
                config.setProperty("username", "Player_" + new Random().nextInt(1000));
                config.setProperty("resolution", "1280x720");
                config.setProperty("fullscreen", "false");
                config.setProperty("javaPath", System.getProperty("java.home") + File.separator + "bin" + File.separator +
                        (System.getProperty("os.name").toLowerCase().contains("win") ? "javaw.exe" : "java"));
                config.setProperty("keepLauncherOpen", "true");
                config.setProperty("showFPS", "true");
                config.setProperty("enableVBO", "true");
                config.setProperty("jvmArgs", "-XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200");
                config.setProperty("masterVolume", "80");
                config.setProperty("musicVolume", "60");
            }
        } catch (IOException e) {
            log("Konfigürasyon dosyası yüklenemedi: " + e.getMessage());
        }
    }

    private void saveConfig() {
        try {
            Path configFile = Paths.get(APP_DATA + "/launcher.properties");
            try (FileOutputStream fos = new FileOutputStream(configFile.toFile())) {
                config.store(fos, "TerraMonic Launcher Config");
            }
        } catch (IOException e) {
            log("Konfigürasyon dosyası kaydedilemedi: " + e.getMessage());
        }
    }
    //endregion

    //region UI Setup
    private void setupStage() {
        primaryStage.setTitle(APP_NAME + " Launcher");

        try {
            Image iconImage = new Image(ICON_URL, 256, 256, true, true);
            primaryStage.getIcons().add(iconImage);
        } catch (Exception e) {
            log("İkon yüklenemedi: " + e.getMessage());
        }

        root = new StackPane();
        root.setStyle("-fx-background-color: " + toRGBCode(BG_DARKER) + ";");

        Scene scene = new Scene(root, 1280, 720);

        primaryStage.initStyle(StageStyle.UNDECORATED);

        primaryStage.setMinWidth(1024);
        primaryStage.setMinHeight(600);

        primaryStage.setScene(scene);

        Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();
        primaryStage.setX((screenBounds.getWidth() - 1280) / 2);
        primaryStage.setY((screenBounds.getHeight() - 720) / 2);
    }

    private void setupInternalStylesheet() {
        String styleSheet =
                ".root { -fx-font-family: 'Segoe UI', 'Arial', sans-serif; }" +
                        ".panel { -fx-background-radius: 8px; -fx-border-radius: 8px; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.4), 10, 0, 0, 0); }" +
                        ".separator { -fx-background-color: #444; -fx-opacity: 0.7; }" +
                        ".text-field { -fx-background-color: rgba(0,0,0,0.3); -fx-text-fill: white; -fx-prompt-text-fill: #aaa; -fx-background-radius: 4px; -fx-padding: 8 12; -fx-highlight-fill: " + toRGBCode(PRIMARY_COLOR) + "; }" +
                        ".text-field:focused { -fx-background-color: rgba(0,0,0,0.5); -fx-border-color: " + toRGBCode(PRIMARY_COLOR) + "; -fx-border-width: 1px; -fx-border-radius: 4px; }" +
                        ".button { -fx-background-color: rgba(0,0,0,0.3); -fx-text-fill: white; -fx-background-radius: 4px; -fx-padding: 8 15; -fx-cursor: hand; }" +
                        ".button:hover { -fx-background-color: rgba(0,0,0,0.5); }" +
                        ".button:pressed { -fx-background-color: rgba(0,0,0,0.7); }" +
                        ".play-button { -fx-background-color: linear-gradient(to bottom, " + toRGBCode(PRIMARY_COLOR) + ", " + toRGBCode(PRIMARY_COLOR_DARK) + "); -fx-text-fill: white; -fx-font-weight: bold; -fx-font-size: 16px; -fx-background-radius: 4px; -fx-padding: 10 30; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 5, 0, 0, 0); -fx-cursor: hand; }" +
                        ".play-button:hover { -fx-background-color: linear-gradient(to bottom, " + toRGBCode(PRIMARY_COLOR) + ", " + toRGBCode(PRIMARY_COLOR) + "); -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.5), 8, 0, 0, 0); }" +
                        ".play-button:pressed { -fx-background-color: " + toRGBCode(PRIMARY_COLOR_DARK) + "; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 3, 0, 0, 0); }" +
                        ".play-button:disabled { -fx-background-color: #555555; -fx-opacity: 0.7; }" +
                        ".secondary-button { -fx-background-color: linear-gradient(to bottom, " + toRGBCode(SECONDARY_COLOR) + ", " + toRGBCode(SECONDARY_COLOR.darker()) + "); -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 4px; -fx-padding: 8 20; -fx-cursor: hand; }" +
                        ".secondary-button:hover { -fx-background-color: " + toRGBCode(SECONDARY_COLOR) + "; }" +
                        ".secondary-button:pressed { -fx-background-color: " + toRGBCode(SECONDARY_COLOR.darker()) + "; }" +
                        ".small-button { -fx-background-color: rgba(0,0,0,0.3); -fx-text-fill: white; -fx-background-radius: 4px; -fx-padding: 8 10; -fx-cursor: hand; }" +
                        ".small-button:hover { -fx-background-color: rgba(0,0,0,0.5); }" +
                        ".small-button:pressed { -fx-background-color: rgba(0,0,0,0.7); }" +
                        ".window-button { -fx-background-color: transparent; -fx-text-fill: white; -fx-background-radius: 0; -fx-padding: 5 10; -fx-cursor: hand; }" +
                        ".window-button:hover { -fx-background-color: rgba(255,255,255,0.1); }" +
                        ".window-button:pressed { -fx-background-color: rgba(255,255,255,0.2); }" +
                        ".window-button-close { -fx-background-color: transparent; -fx-text-fill: white; -fx-background-radius: 0; -fx-padding: 5 10; -fx-cursor: hand; }" +
                        ".window-button-close:hover { -fx-background-color: #e81123; }" +
                        ".window-button-close:pressed { -fx-background-color: #f1707a; }" +
                        ".progress-bar { -fx-accent: " + toRGBCode(PRIMARY_COLOR) + "; }" +
                        ".progress-bar > .track { -fx-background-color: rgba(0,0,0,0.3); -fx-background-radius: 4px; }" +
                        ".progress-bar > .bar { -fx-background-radius: 4px; -fx-background-insets: 0; }" +
                        ".combo-box { -fx-background-color: rgba(0,0,0,0.3); -fx-text-fill: white; -fx-background-radius: 4px; -fx-padding: 2; -fx-cursor: hand; }" +
                        ".combo-box:hover { -fx-background-color: rgba(0,0,0,0.5); }" +
                        ".combo-box:showing { -fx-background-color: rgba(0,0,0,0.6); }" +
                        ".combo-box .list-cell { -fx-text-fill: white; -fx-background-color: transparent; -fx-padding: 6 10; }" +
                        ".combo-box .list-view { -fx-background-color: #333; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.6), 8, 0, 0, 0); }" +
                        ".combo-box .list-view .list-cell { -fx-background-color: transparent; }" +
                        ".combo-box .list-view .list-cell:hover { -fx-background-color: rgba(0,0,0,0.3); }" +
                        ".combo-box .list-view .list-cell:selected { -fx-background-color: " + toRGBCode(PRIMARY_COLOR) + "; }" +
                        ".check-box { -fx-text-fill: white; }" +
                        ".check-box .box { -fx-background-color: rgba(0,0,0,0.3); -fx-border-color: #777; -fx-border-radius: 3px; }" +
                        ".check-box:selected .mark { -fx-background-color: white; }" +
                        ".check-box:selected .box { -fx-background-color: " + toRGBCode(PRIMARY_COLOR) + "; -fx-border-color: " + toRGBCode(PRIMARY_COLOR) + "; }" +
                        ".slider .track { -fx-background-color: rgba(0,0,0,0.3); }" +
                        ".slider .thumb { -fx-background-color: " + toRGBCode(PRIMARY_COLOR) + "; }" +
                        ".console { -fx-font-family: 'Consolas', 'Courier New', monospace; -fx-background-color: rgba(0,0,0,0.3); -fx-text-fill: " + toRGBCode(PRIMARY_COLOR) + "; -fx-highlight-fill: #666; }" +
                        ".info-box { -fx-background-color: rgba(0,0,0,0.3); -fx-background-radius: 6px; -fx-border-radius: 6px; }" +
                        ".news-item { -fx-background-color: rgba(0,0,0,0.2); -fx-background-radius: 5px; -fx-border-radius: 5px; -fx-padding: 10; }" +
                        ".news-item:hover { -fx-background-color: rgba(0,0,0,0.3); }" +
                        ".scroll-pane { -fx-background: transparent; -fx-background-color: transparent; }" +
                        ".scroll-pane > .viewport { -fx-background-color: transparent; }" +
                        ".scroll-pane > .scroll-bar { -fx-background-color: rgba(0,0,0,0.2); -fx-background-radius: 5; }" +
                        ".scroll-pane > .scroll-bar > .thumb { -fx-background-color: rgba(255,255,255,0.3); -fx-background-radius: 5; }" +
                        ".scroll-pane > .scroll-bar > .thumb:hover { -fx-background-color: rgba(255,255,255,0.4); }" +
                        ".scroll-pane > .scroll-bar > .thumb:pressed { -fx-background-color: rgba(255,255,255,0.5); }" +
                        ".scroll-pane > .corner { -fx-background-color: transparent; }" +
                        ".tab-pane > .tab-header-area > .headers-region > .tab { -fx-background-color: rgba(0,0,0,0.3); -fx-background-radius: 4 4 0 0; }" +
                        ".tab-pane > .tab-header-area > .headers-region > .tab:selected { -fx-background-color: rgba(0,0,0,0.5); }" +
                        ".tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-label { -fx-text-fill: white; }";

        try {
            File tempCss = File.createTempFile("terramonic", ".css");
            try (FileWriter writer = new FileWriter(tempCss)) {
                writer.write(styleSheet);
            }
            tempCss.deleteOnExit();
            root.getScene().getStylesheets().add(tempCss.toURI().toURL().toExternalForm());
        } catch (IOException e) {
            log("Stil dosyası oluşturulamadı: " + e.getMessage());
        }
    }

    private void showSplashScreen() {
        StackPane splash = new StackPane();
        splash.setStyle("-fx-background-color: linear-gradient(to bottom, " + toRGBCode(BG_DARKER) + ", " + toRGBCode(BG_DARK) + ");");
        splash.setEffect(new DropShadow(20, Color.BLACK));

        VBox content = new VBox(20);
        content.setAlignment(Pos.CENTER);
        content.setPadding(new Insets(20));

        ImageView logo = new ImageView();
        try {
            Image logoImage = new Image(ICON_URL, 140, 140, true, true);
            logo.setImage(logoImage);
            logo.setFitWidth(140);
            logo.setFitHeight(140);
            logo.setEffect(new DropShadow(10, PRIMARY_COLOR_DARK));
        } catch (Exception e) {
            log("Logo yüklenemedi: " + e.getMessage());
            Rectangle fallback = new Rectangle(140, 140, PRIMARY_COLOR);
            fallback.setArcWidth(20);
            fallback.setArcHeight(20);
            content.getChildren().add(fallback);
        }

        Label title = new Label(APP_NAME);
        title.setFont(Font.font("Arial", FontWeight.BOLD, 42));
        title.setTextFill(PRIMARY_COLOR);
        title.setEffect(new DropShadow(10, PRIMARY_COLOR_DARK));

        progressBar = new ProgressBar(0.0);
        progressBar.setPrefWidth(400);
        progressBar.setStyle("-fx-accent: " + toRGBCode(PRIMARY_COLOR) + ";");

        statusLabel = new Label("Yükleniyor...");
        statusLabel.setTextFill(TEXT_COLOR);
        statusLabel.setFont(Font.font("Arial", 14));

        Label versionLabel = new Label("v" + currentVersion);
        versionLabel.setTextFill(TEXT_COLOR);
        versionLabel.setFont(Font.font("Arial", 14));

        content.getChildren().addAll(logo, title, progressBar, statusLabel, versionLabel);
        splash.getChildren().add(content);
        root.getChildren().add(splash);
    }
    //endregion

    //region Main UI Components
    private void showMainUI() {
        FadeTransition fadeOut = new FadeTransition(Duration.millis(300), root.getChildren().get(0));
        fadeOut.setFromValue(1.0);
        fadeOut.setToValue(0.0);
        fadeOut.setOnFinished(e -> {
            root.getChildren().clear();

            BorderPane mainContainer = createMainUIContainer();
            root.getChildren().add(mainContainer);

            FadeTransition fadeIn = new FadeTransition(Duration.millis(500), mainContainer);
            fadeIn.setFromValue(0.0);
            fadeIn.setToValue(1.0);
            fadeIn.play();

            String savedUsername = config.getProperty("username", "");
            usernameField.setText(savedUsername);
            updatePlayerHead(savedUsername);

            checkGameInstallation();
        });
        fadeOut.play();
    }

    private BorderPane createMainUIContainer() {
        BorderPane mainContainer = new BorderPane();
        mainContainer.setStyle("-fx-background-color: linear-gradient(to bottom, " + toRGBCode(BG_DARKER) + ", " + toRGBCode(BG_DARK) + ");");

        HBox titleBar = createTitleBar();
        mainContainer.setTop(titleBar);

        BorderPane contentPane = new BorderPane();
        contentPane.setPadding(new Insets(20));

        VBox playerSection = createPlayerSection();
        contentPane.setLeft(playerSection);

        VBox settingsSection = createSettingsSection();
        contentPane.setCenter(settingsSection);

        VBox newsSection = createNewsSection();
        contentPane.setRight(newsSection);

        mainContainer.setCenter(contentPane);

        HBox footer = createFooter();
        mainContainer.setBottom(footer);

        return mainContainer;
    }

    private HBox createTitleBar() {
        HBox titleBar = new HBox();
        titleBar.setAlignment(Pos.CENTER_LEFT);
        titleBar.setPadding(new Insets(10, 15, 10, 15));
        titleBar.setStyle("-fx-background-color: " + toRGBCode(BG_DARKER) + ";");

        ImageView logo = new ImageView();
        try {
            Image logoImage = new Image(ICON_URL, 24, 24, true, true);
            logo.setImage(logoImage);
            logo.setFitWidth(24);
            logo.setFitHeight(24);
        } catch (Exception e) {
            log("Başlık logosu yüklenemedi: " + e.getMessage());
            Rectangle replacementIcon = new Rectangle(24, 24, PRIMARY_COLOR);
            replacementIcon.setArcWidth(6);
            replacementIcon.setArcHeight(6);
            StackPane iconContainer = new StackPane(replacementIcon);
            titleBar.getChildren().add(iconContainer);
        }

        Label title = new Label(APP_NAME.toUpperCase());
        title.setFont(Font.font("Arial", FontWeight.BOLD, 16));
        title.setTextFill(PRIMARY_COLOR);
        title.setPadding(new Insets(0, 0, 0, 10));

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        HBox controlButtons = new HBox(10);

        Button minimizeBtn = new Button("_");
        minimizeBtn.getStyleClass().add("window-button");
        minimizeBtn.setOnAction(e -> primaryStage.setIconified(true));

        Button maximizeBtn = new Button("□");
        maximizeBtn.getStyleClass().add("window-button");
        maximizeBtn.setOnAction(e -> {
            if (primaryStage.isMaximized()) {
                primaryStage.setMaximized(false);
                maximizeBtn.setText("□");
            } else {
                primaryStage.setMaximized(true);
                maximizeBtn.setText("❐");
            }
        });

        Button closeBtn = new Button("X");
        closeBtn.getStyleClass().add("window-button-close");
        closeBtn.setOnAction(e -> {
            saveConfig();
            Platform.exit();
            System.exit(0);
        });

        controlButtons.getChildren().addAll(minimizeBtn, maximizeBtn, closeBtn);

        if (logo.getImage() != null) {
            titleBar.getChildren().addAll(logo, title, spacer, controlButtons);
        } else {
            titleBar.getChildren().addAll(title, spacer, controlButtons);
        }

        final Delta dragDelta = new Delta();
        titleBar.setOnMousePressed(e -> {
            dragDelta.x = primaryStage.getX() - e.getScreenX();
            dragDelta.y = primaryStage.getY() - e.getScreenY();
        });
        titleBar.setOnMouseDragged(e -> {
            primaryStage.setX(e.getScreenX() + dragDelta.x);
            primaryStage.setY(e.getScreenY() + dragDelta.y);
        });

        titleBar.setOnMouseClicked(e -> {
            if (e.getClickCount() == 2) {
                if (primaryStage.isMaximized()) {
                    primaryStage.setMaximized(false);
                    maximizeBtn.setText("□");
                } else {
                    primaryStage.setMaximized(true);
                    maximizeBtn.setText("❐");
                }
            }
        });

        return titleBar;
    }

    private static class Delta {
        double x, y;
    }

    private VBox createPlayerSection() {
        VBox playerSection = new VBox(15);
        playerSection.setAlignment(Pos.TOP_LEFT);
        playerSection.setPadding(new Insets(20));
        playerSection.setMaxWidth(300);
        playerSection.getStyleClass().add("panel");
        playerSection.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");

        Label playerLabel = new Label("Oyuncu");
        playerLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        playerLabel.setTextFill(TEXT_COLOR);

        HBox playerBox = new HBox(15);
        playerBox.setAlignment(Pos.CENTER_LEFT);

        playerHead = new ImageView();
        playerHead.setFitWidth(60);
        playerHead.setFitHeight(60);
        playerHead.setEffect(new DropShadow(10, Color.BLACK));

        Rectangle defaultHead = new Rectangle(60, 60, Color.rgb(60, 60, 60));
        playerHead.setImage(new WritableImage(60, 60));

        VBox playerInfoBox = new VBox(10);
        playerInfoBox.setAlignment(Pos.CENTER_LEFT);

        usernameField = new TextField();
        usernameField.setPromptText("Kullanıcı Adı");
        usernameField.setPrefWidth(180);
        usernameField.textProperty().addListener((obs, oldVal, newVal) -> {
            config.setProperty("username", newVal);
            updatePlayerHead(newVal);
        });

        Button logoutBtn = new Button("Çıkış");
        logoutBtn.getStyleClass().add("small-button");
        logoutBtn.setVisible(false);

        playerInfoBox.getChildren().addAll(usernameField, logoutBtn);
        playerBox.getChildren().addAll(playerHead, playerInfoBox);

        playBtn = new Button("OYNA");
        playBtn.getStyleClass().add("play-button");
        playBtn.setMaxWidth(Double.MAX_VALUE);
        playBtn.setPrefHeight(50);
        playBtn.setDisable(true);

        playBtn.setOnAction(e -> launchGame());

        Label consoleLabel = new Label("Konsol");
        consoleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 14));
        consoleLabel.setTextFill(TEXT_COLOR);

        consoleArea = new TextArea();
        consoleArea.getStyleClass().add("console");
        consoleArea.setEditable(false);
        consoleArea.setPrefHeight(150);
        consoleArea.setWrapText(true);

        playerSection.getChildren().addAll(playerLabel, new Separator(), playerBox, playBtn, consoleLabel, consoleArea);

        return playerSection;
    }

    private VBox createSettingsSection() {
        VBox settingsSection = new VBox(15);
        settingsSection.setAlignment(Pos.TOP_LEFT);
        settingsSection.setPadding(new Insets(20));
        settingsSection.setPrefWidth(400);
        settingsSection.getStyleClass().add("panel");
        settingsSection.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");

        Label settingsLabel = new Label("Ayarlar");
        settingsLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        settingsLabel.setTextFill(TEXT_COLOR);

        // RAM Box
        HBox ramBox = new HBox(10);
        ramBox.setAlignment(Pos.CENTER_LEFT);
        Label ramLabel = new Label("RAM:");
        ramLabel.setTextFill(TEXT_COLOR);
        ramLabel.setPrefWidth(120);
        ramComboBox = new ComboBox<>();
        ramComboBox.getItems().addAll("2", "4", "6", "8", "12", "16");
        ramComboBox.setValue(config.getProperty("ram", "4"));
        ramComboBox.setPrefWidth(80);
        ramComboBox.valueProperty().addListener((obs, oldVal, newVal) -> config.setProperty("ram", newVal));
        Label gbLabel = new Label("GB");
        gbLabel.setTextFill(TEXT_COLOR);
        ramBox.getChildren().addAll(ramLabel, ramComboBox, gbLabel);

        // Resolution Box
        HBox resolutionBox = new HBox(10);
        resolutionBox.setAlignment(Pos.CENTER_LEFT);
        Label resolutionLabel = new Label("Çözünürlük:");
        resolutionLabel.setTextFill(TEXT_COLOR);
        resolutionLabel.setPrefWidth(120);
        resolutionComboBox = new ComboBox<>();
        resolutionComboBox.getItems().addAll("800x600", "1024x768", "1280x720", "1366x768", "1600x900", "1920x1080", "2560x1440");
        resolutionComboBox.setValue(config.getProperty("resolution", "1280x720"));
        resolutionComboBox.setPrefWidth(120);
        resolutionComboBox.valueProperty().addListener((obs, oldVal, newVal) -> config.setProperty("resolution", newVal));
        resolutionBox.getChildren().addAll(resolutionLabel, resolutionComboBox);

        // Fullscreen Box
        HBox fullscreenBox = new HBox(10);
        fullscreenBox.setAlignment(Pos.CENTER_LEFT);
        Label fullscreenLabel = new Label("Tam Ekran:");
        fullscreenLabel.setTextFill(TEXT_COLOR);
        fullscreenLabel.setPrefWidth(120);
        fullscreenCheck = new CheckBox();
        fullscreenCheck.setSelected(Boolean.parseBoolean(config.getProperty("fullscreen", "false")));
        fullscreenCheck.selectedProperty().addListener((obs, oldVal, newVal) -> config.setProperty("fullscreen", newVal.toString()));
        fullscreenBox.getChildren().addAll(fullscreenLabel, fullscreenCheck);

        // Version Box
        HBox versionBox = new HBox(10);
        versionBox.setAlignment(Pos.CENTER_LEFT);
        Label versionLabel = new Label("Minecraft Sürümü:");
        versionLabel.setTextFill(TEXT_COLOR);
        versionLabel.setPrefWidth(120);
        Label versionValueLabel = new Label(MC_VERSION);
        versionValueLabel.setTextFill(PRIMARY_COLOR);
        versionValueLabel.setFont(Font.font("Arial", FontWeight.BOLD, 12));
        versionBox.getChildren().addAll(versionLabel, versionValueLabel);

        // Fabric Box
        HBox fabricBox = new HBox(10);
        fabricBox.setAlignment(Pos.CENTER_LEFT);
        Label fabricLabel = new Label("Fabric Sürümü:");
        fabricLabel.setTextFill(TEXT_COLOR);
        fabricLabel.setPrefWidth(120);
        Label fabricValueLabel = new Label(FABRIC_VERSION);
        fabricValueLabel.setTextFill(PRIMARY_COLOR);
        fabricValueLabel.setFont(Font.font("Arial", FontWeight.BOLD, 12));
        fabricBox.getChildren().addAll(fabricLabel, fabricValueLabel);

        // Keep Launcher Open
        HBox keepOpenBox = new HBox(10);
        keepOpenBox.setAlignment(Pos.CENTER_LEFT);
        Label keepOpenLabel = new Label("Launcher Açık Kalsın:");
        keepOpenLabel.setTextFill(TEXT_COLOR);
        keepOpenLabel.setPrefWidth(120);
        CheckBox keepOpenCheck = new CheckBox();
        keepOpenCheck.setSelected(Boolean.parseBoolean(config.getProperty("keepLauncherOpen", "true")));
        keepOpenCheck.selectedProperty().addListener((obs, oldVal, newVal) -> config.setProperty("keepLauncherOpen", newVal.toString()));
        keepOpenBox.getChildren().addAll(keepOpenLabel, keepOpenCheck);

        // Show FPS
        HBox showFPSBox = new HBox(10);
        showFPSBox.setAlignment(Pos.CENTER_LEFT);
        Label showFPSLabel = new Label("FPS Göster:");
        showFPSLabel.setTextFill(TEXT_COLOR);
        showFPSLabel.setPrefWidth(120);
        CheckBox showFPSCheck = new CheckBox();
        showFPSCheck.setSelected(Boolean.parseBoolean(config.getProperty("showFPS", "true")));
        showFPSCheck.selectedProperty().addListener((obs, oldVal, newVal) -> config.setProperty("showFPS", newVal.toString()));
        showFPSBox.getChildren().addAll(showFPSLabel, showFPSCheck);

        // Volume Box
        VBox volumeBox = new VBox(10);
        volumeBox.setAlignment(Pos.CENTER_LEFT);
        Label volumeLabel = new Label("Ses");
        volumeLabel.setFont(Font.font("Arial", FontWeight.BOLD, 14));
        volumeLabel.setTextFill(TEXT_COLOR);

        // Master Volume
        HBox masterVolumeBox = new HBox(10);
        masterVolumeBox.setAlignment(Pos.CENTER_LEFT);
        Label masterVolumeLabel = new Label("Ana Ses:");
        masterVolumeLabel.setTextFill(TEXT_COLOR);
        masterVolumeLabel.setPrefWidth(80);
        Slider masterVolumeSlider = new Slider(0, 100, Double.parseDouble(config.getProperty("masterVolume", "80")));
        masterVolumeSlider.setPrefWidth(150);
        Label masterVolumeValue = new Label(config.getProperty("masterVolume", "80") + "%");
        masterVolumeValue.setTextFill(TEXT_COLOR);
        masterVolumeSlider.valueProperty().addListener((obs, oldVal, newVal) -> {
            config.setProperty("masterVolume", Integer.toString(newVal.intValue()));
            masterVolumeValue.setText(newVal.intValue() + "%");
        });
        masterVolumeBox.getChildren().addAll(masterVolumeLabel, masterVolumeSlider, masterVolumeValue);

        // Music Volume
        HBox musicVolumeBox = new HBox(10);
        musicVolumeBox.setAlignment(Pos.CENTER_LEFT);
        Label musicVolumeLabel = new Label("Müzik:");
        musicVolumeLabel.setTextFill(TEXT_COLOR);
        musicVolumeLabel.setPrefWidth(80);
        Slider musicVolumeSlider = new Slider(0, 100, Double.parseDouble(config.getProperty("musicVolume", "60")));
        musicVolumeSlider.setPrefWidth(150);
        Label musicVolumeValue = new Label(config.getProperty("musicVolume", "60") + "%");
        musicVolumeValue.setTextFill(TEXT_COLOR);
        musicVolumeSlider.valueProperty().addListener((obs, oldVal, newVal) -> {
            config.setProperty("musicVolume", Integer.toString(newVal.intValue()));
            musicVolumeValue.setText(newVal.intValue() + "%");
        });
        musicVolumeBox.getChildren().addAll(musicVolumeLabel, musicVolumeSlider, musicVolumeValue);

        volumeBox.getChildren().addAll(volumeLabel, masterVolumeBox, musicVolumeBox);

        settingsSection.getChildren().addAll(
                settingsLabel, new Separator(),
                ramBox, resolutionBox, fullscreenBox,
                new Separator(),
                versionBox, fabricBox,
                new Separator(),
                keepOpenBox, showFPSBox,
                new Separator(),
                volumeBox
        );

        return settingsSection;
    }

    private VBox createNewsSection() {
        VBox newsSection = new VBox(15);
        newsSection.setAlignment(Pos.TOP_LEFT);
        newsSection.setPadding(new Insets(20));
        newsSection.setPrefWidth(300);
        newsSection.getStyleClass().add("panel");
        newsSection.setStyle("-fx-background-color: rgba(0, 0, 0, 0.3);");

        Label newsLabel = new Label("Duyurular & Haberler");
        newsLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        newsLabel.setTextFill(TEXT_COLOR);

        ScrollPane newsScroll = new ScrollPane();
        newsScroll.setFitToWidth(true);
        newsScroll.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        newsScroll.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
        newsScroll.getStyleClass().add("scroll-pane");

        newsItemsContainer.getChildren().clear();
        Label loadingLabel = new Label("Haberler yükleniyor...");
        loadingLabel.setTextFill(TEXT_COLOR);
        loadingLabel.setPadding(new Insets(20));
        newsItemsContainer.getChildren().add(loadingLabel);

        newsScroll.setContent(newsItemsContainer);
        newsScroll.setPrefHeight(400);

        newsSection.getChildren().addAll(newsLabel, new Separator(), newsScroll);

        return newsSection;
    }

    private HBox createFooter() {
        HBox footer = new HBox();
        footer.setAlignment(Pos.CENTER_LEFT);
        footer.setPadding(new Insets(10, 15, 10, 15));
        footer.setStyle("-fx-background-color: " + toRGBCode(BG_DARKER) + ";");

        Label versionLabel = new Label("TerraMonic Launcher v" + currentVersion);
        versionLabel.setTextFill(TEXT_COLOR);

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        Hyperlink websiteLink = new Hyperlink("Resmi Site");
        websiteLink.setTextFill(PRIMARY_COLOR);
        websiteLink.setOnAction(e -> openWebPage("https://terramonic.com"));

        Hyperlink discordLink = new Hyperlink("Discord");
        discordLink.setTextFill(PRIMARY_COLOR);
        discordLink.setOnAction(e -> openWebPage("https://discord.gg/terramonic"));

        footer.getChildren().addAll(versionLabel, spacer, websiteLink, new Label(" | "), discordLink);

        return footer;
    }
    //endregion

    //region Helper Methods
    private void updatePlayerHead(String username) {
        if (username == null || username.trim().isEmpty()) {
            Rectangle defaultHead = new Rectangle(60, 60, Color.rgb(60, 60, 60));
            playerHead.setImage(new WritableImage(60, 60));
            return;
        }

        try {
            Image head = new Image("https://minotar.net/helm/" + username + "/60.png", true);
            playerHead.setImage(head);
        } catch (Exception e) {
            log("Oyuncu başı yüklenemedi: " + e.getMessage());
            Rectangle defaultHead = new Rectangle(60, 60, Color.rgb(60, 60, 60));
            playerHead.setImage(new WritableImage(60, 60));
        }
    }

    private String toRGBCode(Color color) {
        return String.format("#%02X%02X%02X",
                (int) (color.getRed() * 255),
                (int) (color.getGreen() * 255),
                (int) (color.getBlue() * 255));
    }

    private void showError(String message) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Hata");
            alert.setHeaderText("Bir hata oluştu");
            alert.setContentText(message);
            alert.showAndWait();
        });
    }

    private void log(String message) {
        Platform.runLater(() -> {
            if (consoleArea != null) {
                String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
                consoleArea.appendText("[" + timestamp + "] " + message + "\n");
                consoleArea.positionCaret(consoleArea.getText().length());
            }
            System.out.println(message);
        });
    }

    private void updateStatus(String status) {
        Platform.runLater(() -> {
            if (statusLabel != null) {
                statusLabel.setText(status);
            }
        });
    }

    private void updateProgress(double progress) {
        Platform.runLater(() -> {
            if (progressBar != null) {
                progressBar.setProgress(progress);
            }
        });
    }

    private void openWebPage(String url) {
        try {
            new ProcessBuilder("cmd", "/c", "start", url).start();
        } catch (IOException e) {
            log("Web sayfası açılamadı: " + e.getMessage());
            showError("Web sayfası açılamadı: " + url);
        }
    }
    //endregion

    //region Game Installation and Launch
    private void createAppDataFolder() {
        try {
            Files.createDirectories(Paths.get(APP_DATA));
            Files.createDirectories(Paths.get(MINECRAFT_DIR + "/libraries"));
            Files.createDirectories(Paths.get(MINECRAFT_DIR + "/versions"));
            Files.createDirectories(Paths.get(MINECRAFT_DIR + "/assets"));
            Files.createDirectories(Paths.get(MINECRAFT_DIR + "/mods"));
            log("Uygulama dizinleri oluşturuldu: " + APP_DATA);
        } catch (IOException e) {
            log("Dizin oluşturma hatası: " + e.getMessage());
            showError("Dizin oluşturma hatası: " + e.getMessage());
        }
    }

    private void checkForUpdates() {
        Service<Boolean> updateService = new Service<>() {
            @Override
            protected Task<Boolean> createTask() {
                return new Task<Boolean>() {
                    @Override
                    protected Boolean call() throws Exception {
                        updateStatus("Güncellemeler kontrol ediliyor...");
                        updateProgress(0.1);

                        URI uri = new URI(VERSION_JSON);
                        HttpURLConnection connection = (HttpURLConnection) uri.toURL().openConnection();
                        connection.setRequestMethod("GET");
                        connection.setConnectTimeout(5000);
                        connection.setReadTimeout(5000);

                        try (InputStream in = connection.getInputStream();
                             BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
                            StringBuilder response = new StringBuilder();
                            String line;
                            while ((line = reader.readLine()) != null) {
                                response.append(line);
                            }

                            updateProgress(0.2);
                            versionData = new JSONObject(response.toString());

                            // Check maintenance mode
                            if (versionData.has("bakimmodu") && versionData.getBoolean("bakimmodu")) {
                                Platform.runLater(() -> {
                                    showError("Sunucular bakım modunda. Lütfen daha sonra tekrar deneyin.");
                                    Platform.exit();
                                    System.exit(0);
                                });
                                return false;
                            }

                            // Download and extract additional files
                            if (versionData.has("ekdosyalar")) {
                                JSONArray extraFiles = versionData.getJSONArray("ekdosyalar");
                                int totalFiles = extraFiles.length();
                                for (int i = 0; i < totalFiles; i++) {
                                    JSONObject file = extraFiles.getJSONObject(i);
                                    String name = file.getString("ad");
                                    String url = file.getString("url");
                                    Path targetPath = Paths.get(APP_DATA, name);

                                    updateStatus("İndiriliyor: " + name);
                                    downloadFile(url, targetPath);

                                    if (name.endsWith(".zip")) {
                                        updateStatus("Ayıklanıyor: " + name);
                                        extractZip(targetPath, Paths.get(APP_DATA));
                                        Files.deleteIfExists(targetPath);
                                        log("Zip dosyası silindi: " + name);
                                    }

                                    updateProgress(0.2 + (i + 1) * 0.2 / totalFiles);
                                }

                                updateStatus("Boş dizinler temizleniyor...");
                                cleanEmptyDirectories(Paths.get(APP_DATA));
                            }

                            updateProgress(0.4);
                            return true;
                        }
                    }

                    private void updateProgress(double v) {
                    }
                };
            }
        };

        updateService.setOnSucceeded(event -> {
            if (versionData != null && versionData.has("version")) {
                String latestVersion = versionData.getString("version");
                log("En son versiyon: " + latestVersion);
                log("Mevcut versiyon: " + currentVersion);

                if (!latestVersion.equals(currentVersion)) {
                    updateStatus("Yeni güncelleme mevcut: " + latestVersion);
                    showUpdateDialog(latestVersion);
                } else {
                    updateStatus("En son sürümü kullanıyorsunuz");
                    updateProgress(0.5);
                    loadNews();
                    PauseTransition pause = new PauseTransition(Duration.seconds(1));
                    pause.setOnFinished(e -> showMainUI());
                    pause.play();
                }
            } else {
                updateStatus("Versiyon bilgisi alınamadı");
                offlineMode = true;
                loadNews();
                showMainUI();
            }
        });

        updateService.setOnFailed(event -> {
            updateProgress(0.0);
            Throwable exception = updateService.getException();
            log("Güncelleme kontrolü başarısız: " + (exception != null ? exception.getMessage() : "Bilinmeyen hata"));
            updateStatus("Çevrimdışı mod");
            offlineMode = true;
            loadNews();
            showMainUI();
        });

        updateService.start();
    }

    private void downloadFile(String url, Path target) throws IOException {
        try {
            HttpURLConnection connection = (HttpURLConnection) new URI(url).toURL().openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            Files.createDirectories(target.getParent());
            try (ReadableByteChannel rbc = Channels.newChannel(connection.getInputStream());
                 FileChannel fc = FileChannel.open(target, StandardOpenOption.CREATE, StandardOpenOption.WRITE)) {
                fc.transferFrom(rbc, 0, Long.MAX_VALUE);
            }
        } catch (URISyntaxException e) {
            throw new IOException("Geçersiz URL: " + url, e);
        }
    }

    private void extractZip(Path zipFile, Path destDir) throws IOException {
        Files.createDirectories(destDir);
        try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zipFile))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                Path entryPath = destDir.resolve(entry.getName());
                if (entry.isDirectory()) {
                    Files.createDirectories(entryPath);
                } else {
                    Files.createDirectories(entryPath.getParent());
                    try (OutputStream out = Files.newOutputStream(entryPath)) {
                        byte[] buffer = new byte[8192];
                        int len;
                        while ((len = zis.read(buffer)) > 0) {
                            out.write(buffer, 0, len);
                        }
                    }
                }
                zis.closeEntry();
            }
        }
    }

    private void cleanEmptyDirectories(Path dir) throws IOException {
        Files.walkFileTree(dir, new SimpleFileVisitor<>() {
            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
                    if (!stream.iterator().hasNext() && !dir.equals(Paths.get(APP_DATA))) {
                        Files.delete(dir);
                        log("Boş dizin silindi: " + dir);
                    }
                }
                return FileVisitResult.CONTINUE;
            }
        });
    }

    private void showUpdateDialog(String newVersion) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Yeni Güncelleme");
            alert.setHeaderText("Yeni bir güncelleme mevcut: v" + newVersion);
            alert.setContentText("Şimdi güncellemek ister misiniz?");

            Optional<ButtonType> result = alert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                downloadUpdate(newVersion);
            } else {
                updateStatus("Hazır");
                updateProgress(0.5);
                loadNews();
                showMainUI();
            }
        });
    }

    private void downloadUpdate(String newVersion) {
        log("Güncelleme indiriliyor: v" + newVersion);
        updateStatus("Güncelleme indiriliyor...");
        PauseTransition pause = new PauseTransition(Duration.seconds(2));
        pause.setOnFinished(e -> {
            currentVersion = newVersion;
            saveConfig();
            updateStatus("Güncelleme tamamlandı");
            updateProgress(0.5);
            loadNews();
            showMainUI();
        });
        pause.play();
    }

    private void loadNews() {
        Platform.runLater(() -> newsItemsContainer.getChildren().clear());
        if (versionData != null && versionData.has("haberler")) {
            try {
                JSONObject news = versionData.getJSONObject("haberler");
                List<VBox> newsItems = new ArrayList<>();
                for (int i = 1; i <= 3; i++) {
                    String titleKey = i == 1 ? "baslik" : "baslik" + i;
                    String contentKey = i == 1 ? "icerik" : "icerik" + i;
                    if (news.has(titleKey) && news.has(contentKey)) {
                        String title = news.getString(titleKey);
                        String content = news.getString(contentKey);
                        newsItems.add(createNewsItem(title, content));
                    }
                }
                Platform.runLater(() -> {
                    newsItemsContainer.getChildren().clear();
                    newsItemsContainer.getChildren().addAll(newsItems);
                });
            } catch (Exception e) {
                log("Haberler yüklenemedi: " + e.getMessage());
                Platform.runLater(() -> {
                    newsItemsContainer.getChildren().clear();
                    VBox defaultItem = createNewsItem("Hoş Geldiniz!", "TerraMonic'e hoş geldiniz! En iyi deneyimi yaşamak için ayarlarınızı yapılandırın.");
                    newsItemsContainer.getChildren().add(defaultItem);
                });
            }
        } else {
            Platform.runLater(() -> {
                newsItemsContainer.getChildren().clear();
                VBox defaultItem = createNewsItem("Hoş Geldiniz!", "TerraMonic'e hoş geldiniz! En iyi deneyimi yaşamak için ayarlarınızı yapılandırın.");
                newsItemsContainer.getChildren().add(defaultItem);
            });
        }
    }

    private VBox createNewsItem(String title, String content) {
        VBox newsItem = new VBox(10);
        newsItem.getStyleClass().add("news-item");

        Label titleLabel = new Label(title);
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 14));
        titleLabel.setTextFill(PRIMARY_COLOR);
        titleLabel.setWrapText(true);

        Label contentLabel = new Label(content);
        contentLabel.setFont(Font.font("Arial", 12));
        contentLabel.setTextFill(TEXT_COLOR);
        contentLabel.setWrapText(true);

        Separator separator = new Separator();

        newsItem.getChildren().addAll(titleLabel, contentLabel, separator);
        return newsItem;
    }

    private void checkGameInstallation() {
        Service<Void> installationService = new Service<>() {
            @Override
            protected Task<Void> createTask() {
                return new Task<>() {
                    @Override
                    protected Void call() throws Exception {
                        performGameInstallation();
                        return null;
                    }
                };
            }
        };

        installationService.setOnSucceeded(e -> {
            log("Oyun kurulumu tamamlandı");
            updateUIAfterInstallation(true);
        });

        installationService.setOnFailed(e -> {
            Throwable ex = installationService.getException();
            log("Oyun kurulumu başarısız: " + (ex != null ? ex.getMessage() : "Bilinmeyen hata"));
            updateUIAfterInstallation(false);
        });

        installationService.start();
    }

    private void performGameInstallation() {
        updateInstallationStatus("Oyun dosyaları kontrol ediliyor...", 0.5);
        try {
            // Verify game files
            verifyGameFiles();

            // Install vanilla Minecraft
            if (!installVanillaMinecraft()) {
                handleInstallationError("Vanilla Minecraft kurulumu başarısız");
                return;
            }

            // Fetch version JSON
            updateInstallationStatus("Sürüm bilgileri alınıyor...", 0.6);
            if (!fetchMinecraftVersionJson()) {
                handleInstallationError("Sürüm bilgisi alınamadı");
                return;
            }

            // Download libraries
            updateInstallationStatus("Kütüphaneler indiriliyor...", 0.7);
            if (!downloadMinecraftLibraries()) {
                handleInstallationError("Kütüphaneler indirilemedi");
                return;
            }

            // Install Fabric
            if (!ensureFabricInstalled()) {
                return; // Error already handled
            }

            // Download assets
            updateInstallationStatus("Oyun kaynakları indiriliyor...", 0.9);
            if (!downloadAssets()) {
                handleInstallationError("Oyun kaynakları indirilemedi");
                return;
            }

            // Installation complete
            completeInstallation();
            cleanupAfterInstallation();
        } catch (Exception e) {
            handleInstallationError("Kurulum sırasında beklenmeyen hata: " + e.getMessage());
        }
    }

    private void verifyGameFiles() {
        updateInstallationStatus("Oyun dosyaları doğrulanıyor...", 0.3);
        try {
            // Ensure directories exist
            Files.createDirectories(Paths.get(MINECRAFT_DIR, "versions"));
            Files.createDirectories(Paths.get(MINECRAFT_DIR, "libraries"));
            Files.createDirectories(Paths.get(MINECRAFT_DIR, "assets"));
            Files.createDirectories(Paths.get(MINECRAFT_DIR, "natives"));

            // Verify core files
            Path fabricJar = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION + "-fabric-" + FABRIC_VERSION, GAME_JAR);
            if (!Files.exists(fabricJar)) {
                throw new IOException("Fabric JAR bulunamadı");
            }

            Path mcJar = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".jar");
            if (!Files.exists(mcJar)) {
                throw new IOException("Minecraft JAR bulunamadı");
            }

            updateInstallationStatus("Oyun dosyaları doğrulandı", 0.4);
        } catch (Exception e) {
            handleInstallationError("Dosya doğrulama hatası: " + e.getMessage());
        }
    }

    private boolean ensureFabricInstalled() {
        Path fabricJarPath = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION + "-fabric-" + FABRIC_VERSION, GAME_JAR);
        Path versionDir = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION + "-fabric-" + FABRIC_VERSION);
        Path versionJsonPath = versionDir.resolve(MC_VERSION + "-fabric-" + FABRIC_VERSION + ".json");

        if (!Files.exists(fabricJarPath) || !Files.exists(versionJsonPath)) {
            updateInstallationStatus("Fabric yükleniyor...", 0.7);
            try {
                // Create temp directory
                Path tempDir = Paths.get(MINECRAFT_DIR, "temp");
                Files.createDirectories(tempDir);

                // Download installer
                Path installerPath = tempDir.resolve("fabric-installer.jar");
                updateInstallationStatus("Fabric yükleyici indiriliyor...", 0.75);
                downloadFile(FABRIC_INSTALLER_URL, installerPath);

                // Run installer
                updateInstallationStatus("Fabric kuruluyor...", 0.8);
                ProcessBuilder pb = new ProcessBuilder(
                        getJavaPath(),
                        "-jar", installerPath.toString(),
                        "client",
                        "-dir", MINECRAFT_DIR,
                        "-mcversion", MC_VERSION,
                        "-loader", FABRIC_VERSION,
                        "-noprofile"
                );
                pb.redirectErrorStream(true);
                Process process = pb.start();

                // Monitor installer output
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        log("Fabric Installer: " + line);
                    }
                }

                int exitCode = process.waitFor();
                Files.deleteIfExists(installerPath); // Clean up installer

                if (exitCode != 0) {
                    handleInstallationError("Fabric yükleyici hata kodu: " + exitCode);
                    return false;
                }

                // Verify Fabric JAR and JSON
                if (!Files.exists(fabricJarPath) || !Files.exists(versionJsonPath)) {
                    handleInstallationError("Fabric JAR veya JSON dosyası oluşturulamadı");
                    return false;
                }

                log("Fabric başarıyla yüklendi");
                return true;
            } catch (Exception e) {
                handleInstallationError("Fabric yükleme hatası: " + e.getMessage());
                return false;
            } finally {
                // Clean up temp directory
                try {
                    Path tempDir = Paths.get(MINECRAFT_DIR, "temp");
                    if (Files.exists(tempDir)) {
                        deleteDirectory(tempDir);
                    }
                } catch (IOException e) {
                    log("Temp dizini silinirken hata: " + e.getMessage());
                }
            }
        }
        return true;
    }

    private void cleanupAfterInstallation() {
        try {
            updateInstallationStatus("Temizlik yapılıyor...", 0.95);
            Path tempDir = Paths.get(MINECRAFT_DIR, "temp");
            if (Files.exists(tempDir)) {
                deleteDirectory(tempDir);
            }
            updateInstallationStatus("Temizlik tamamlandı", 1.0);
        } catch (IOException e) {
            log("Temizlik sırasında hata: " + e.getMessage());
        }
    }

    private void updateInstallationStatus(String status, double progress) {
        Platform.runLater(() -> {
            updateStatus(status);
            updateProgress(progress);
        });
    }

    private void handleInstallationError(String errorMessage) {
        log("Kurulum hatası: " + errorMessage);
        updateInstallationStatus("Hata: " + errorMessage, 0.0);
        showError(errorMessage);
    }

    private void completeInstallation() {
        updateInstallationStatus("Kurulum tamamlandı", 1.0);
        Platform.runLater(() -> {
            playBtn.setDisable(false);
            playBtn.setText("OYNA");
        });
    }

    private void updateUIAfterInstallation(boolean success) {
        Platform.runLater(() -> {
            if (success) {
                playBtn.setDisable(false);
                playBtn.setText("OYNA");
                updateStatus("Oyun hazır!");
                updateProgress(1.0);
            } else {
                playBtn.setDisable(true);
                playBtn.setText("KURULUM HATASI");
                updateStatus("Kurulum başarısız");
                updateProgress(0.0);
                showError("Oyun kurulumu başarısız, lütfen logları kontrol edin.");
            }
        });
    }

    private void checkForJavaInstallation() {
        try {
            Process process = Runtime.getRuntime().exec(new String[]{getJavaPath(), "-version"});
            int exitCode = process.waitFor();
            if (exitCode != 0) {
                showError("Java kurulu değil veya yolu yanlış ayarlanmış!");
            }
        } catch (Exception e) {
            showError("Java kontrol edilemedi: " + e.getMessage());
        }
    }

    private void deleteDirectory(Path dir) throws IOException {
        Files.walkFileTree(dir, new SimpleFileVisitor<>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                Files.delete(file);
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                Files.delete(dir);
                return FileVisitResult.CONTINUE;
            }
        });
    }

    private boolean installVanillaMinecraft() {
        try {
            updateStatus("Vanilla Minecraft indiriliyor...");
            URI manifestUri = new URI(MINECRAFT_MANIFEST_URL);
            HttpURLConnection connection = (HttpURLConnection) manifestUri.toURL().openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            try (InputStream in = connection.getInputStream();
                 BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }

                JSONObject manifest = new JSONObject(response.toString());
                JSONArray versions = manifest.getJSONArray("versions");
                for (int i = 0; i < versions.length(); i++) {
                    JSONObject version = versions.getJSONObject(i);
                    if (version.getString("id").equals(MC_VERSION)) {
                        String versionJsonUrl = version.getString("url");
                        HttpURLConnection versionConnection = (HttpURLConnection) new URI(versionJsonUrl).toURL().openConnection();
                        versionConnection.setRequestMethod("GET");
                        try (InputStream versionIn = versionConnection.getInputStream();
                             BufferedReader versionReader = new BufferedReader(new InputStreamReader(versionIn))) {
                            StringBuilder versionResponse = new StringBuilder();
                            while ((line = versionReader.readLine()) != null) {
                                versionResponse.append(line);
                            }
                            JSONObject versionJson = new JSONObject(versionResponse.toString());

                            // Download client.jar
                            JSONObject downloads = versionJson.getJSONObject("downloads");
                            JSONObject client = downloads.getJSONObject("client");
                            String clientUrl = client.getString("url");
                            String clientSha1 = client.getString("sha1");
                            Path clientPath = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".jar");
                            Files.createDirectories(clientPath.getParent());

                            if (!Files.exists(clientPath) || !verifyFileChecksum(clientPath, clientSha1)) {
                                downloadFile(clientUrl, clientPath);
                                if (!verifyFileChecksum(clientPath, clientSha1)) {
                                    log("Client JAR doğrulama hatası");
                                    return false;
                                }
                            }

                            // Save version JSON
                            Path versionJsonPath = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".json");
                            try (FileWriter writer = new FileWriter(versionJsonPath.toFile())) {
                                writer.write(versionJson.toString(2));
                            }

                            log("Vanilla Minecraft " + MC_VERSION + " kuruldu");
                            return true;
                        }
                    }
                }
            }
        } catch (Exception e) {
            log("Vanilla Minecraft kurulamadı: " + e.getMessage());
            return false;
        }
        return false;
    }

    private boolean fetchMinecraftVersionJson() {
        try {
            Path versionJsonPath = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".json");
            if (Files.exists(versionJsonPath)) {
                try (BufferedReader reader = Files.newBufferedReader(versionJsonPath)) {
                    minecraftVersionJson = reader.lines().collect(Collectors.joining());
                    return true;
                }
            }

            URI manifestUri = new URI(MINECRAFT_MANIFEST_URL);
            HttpURLConnection connection = (HttpURLConnection) manifestUri.toURL().openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            try (InputStream in = connection.getInputStream();
                 BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }

                JSONObject manifest = new JSONObject(response.toString());
                JSONArray versions = manifest.getJSONArray("versions");
                for (int i = 0; i < versions.length(); i++) {
                    JSONObject version = versions.getJSONObject(i);
                    if (version.getString("id").equals(MC_VERSION)) {
                        String versionJsonUrl = version.getString("url");
                        HttpURLConnection versionConnection = (HttpURLConnection) new URI(versionJsonUrl).toURL().openConnection();
                        versionConnection.setRequestMethod("GET");
                        try (InputStream versionIn = versionConnection.getInputStream();
                             BufferedReader versionReader = new BufferedReader(new InputStreamReader(versionIn))) {
                            StringBuilder versionResponse = new StringBuilder();
                            while ((line = versionReader.readLine()) != null) {
                                versionResponse.append(line);
                            }
                            minecraftVersionJson = versionResponse.toString();
                            Files.createDirectories(versionJsonPath.getParent());
                            try (FileWriter writer = new FileWriter(versionJsonPath.toFile())) {
                                writer.write(minecraftVersionJson);
                            }
                            return true;
                        }
                    }
                }
            }
        } catch (Exception e) {
            log("Minecraft sürüm bilgisi alınamadı: " + e.getMessage());
            offlineMode = true;
        }
        return false;
    }

    private boolean downloadMinecraftLibraries() {
        if (minecraftVersionJson == null) {
            return false;
        }

        try {
            JSONObject versionData = new JSONObject(minecraftVersionJson);
            JSONArray libraries = versionData.getJSONArray("libraries");
            for (int i = 0; i < libraries.length(); i++) {
                JSONObject library = libraries.getJSONObject(i);
                String name = library.getString("name");
                JSONObject downloads = library.getJSONObject("downloads");
                JSONObject artifact = downloads.getJSONObject("artifact");
                String url = artifact.getString("url");
                String path = artifact.getString("path");
                String sha1 = artifact.getString("sha1");
                Path targetPath = Paths.get(MINECRAFT_DIR, "libraries", path);
                Files.createDirectories(targetPath.getParent());

                if (Files.exists(targetPath) && verifyFileChecksum(targetPath, sha1)) {
                    minecraftLibraries.put(name, targetPath.toString());
                    continue;
                }

                downloadFile(url, targetPath);
                if (verifyFileChecksum(targetPath, sha1)) {
                    minecraftLibraries.put(name, targetPath.toString());
                } else {
                    log("Kütüphane doğrulama hatası: " + name);
                    return false;
                }
            }
            return true;
        } catch (Exception e) {
            log("Kütüphaneler indirilemedi: " + e.getMessage());
            return false;
        }
    }

    private boolean downloadAssets() {
        if (minecraftVersionJson == null) {
            return false;
        }

        try {
            JSONObject versionData = new JSONObject(minecraftVersionJson);
            JSONObject assetIndex = versionData.getJSONObject("assetIndex");
            String assetIndexUrl = assetIndex.getString("url");
            String assetIndexSha1 = assetIndex.getString("sha1");

            Path assetIndexPath = Paths.get(MINECRAFT_DIR, "assets", "indexes", MC_VERSION + ".json");
            Files.createDirectories(assetIndexPath.getParent());

            if (!Files.exists(assetIndexPath) || !verifyFileChecksum(assetIndexPath, assetIndexSha1)) {
                updateStatus("Asset index indiriliyor...");
                downloadFile(assetIndexUrl, assetIndexPath);
                if (!verifyFileChecksum(assetIndexPath, assetIndexSha1)) {
                    log("Asset index doğrulama hatası");
                    return false;
                }
            }

            try (BufferedReader reader = Files.newBufferedReader(assetIndexPath)) {
                JSONObject assets = new JSONObject(reader.lines().collect(Collectors.joining()));
                JSONObject objects = assets.getJSONObject("objects");
                Iterator<String> keys = objects.keys();
                int totalAssets = objects.length();
                int downloadedAssets = 0;

                while (keys.hasNext()) {
                    String key = keys.next();
                    JSONObject asset = objects.getJSONObject(key);
                    String hash = asset.getString("hash");
                    String hashPrefix = hash.substring(0, 2);
                    Path assetPath = Paths.get(MINECRAFT_DIR, "assets", "objects", hashPrefix, hash);
                    Files.createDirectories(assetPath.getParent());

                    if (!Files.exists(assetPath) || !verifyFileChecksum(assetPath, hash)) {
                        String assetUrl = "https://resources.download.minecraft.net/" + hashPrefix + "/" + hash;
                        downloadFile(assetUrl, assetPath);
                        if (!verifyFileChecksum(assetPath, hash)) {
                            log("Asset doğrulama hatası: " + key);
                            return false;
                        }
                    }

                    downloadedAssets++;
                    double progress = (double) downloadedAssets / totalAssets;
                    updateProgress(0.8 + progress * 0.2);
                }
            }

            return true;
        } catch (Exception e) {
            log("Asset'ler indirilemedi: " + e.getMessage());
            return false;
        }
    }

    private boolean verifyFileChecksum(Path file, String expectedSha1) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            try (InputStream fis = Files.newInputStream(file)) {
                byte[] buffer = new byte[8192];
                int bytesRead;
                while ((bytesRead = fis.read(buffer)) != -1) {
                    digest.update(buffer, 0, bytesRead);
                }
            }
            byte[] hashedBytes = digest.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString().equalsIgnoreCase(expectedSha1);
        } catch (Exception e) {
            log("Dosya doğrulama hatası: " + e.getMessage());
            return false;
        }
    }

    // Main game launch method
    private void launchGame() {
        if (isGameRunning.get()) {
            showError("Oyun zaten çalışıyor!");
            return;
        }

        String username = usernameField.getText().trim();
        if (username.isEmpty()) {
            showError("Lütfen geçerli bir kullanıcı adı girin!");
            return;
        }

        playBtn.setDisable(true);
        playBtn.setText("BAŞLATILIYOR...");

        Service<Void> gameLauncher = new Service<>() {
            @Override
            protected Task<Void> createTask() {
                return new Task<>() {
                    @Override
                    protected Void call() throws Exception {
                        isGameRunning.set(true);
                        updateStatus("Oyun başlatılıyor...");
                        updateProgress(0.0);
                        log("Kullanıcı adı: " + username);

                        // Prepare launch parameters
                        String ram = ramComboBox.getValue() != null ? ramComboBox.getValue() : "4";
                        String resolution = resolutionComboBox.getValue() != null ? resolutionComboBox.getValue() : "1280x720";
                        boolean fullscreen = fullscreenCheck.isSelected();

                        // Build Java command
                        List<String> command = new ArrayList<>();
                        command.add(getJavaPath());
                        command.add("-Xmx" + ram + "G");
                        command.add("-Xms" + ram + "G");

                        String jvmArgs = config.getProperty("jvmArgs", "");
                        if (!jvmArgs.isEmpty()) {
                            command.addAll(Arrays.asList(jvmArgs.split("\\s+")));
                        }

                        command.add("-Djava.library.path=" + Paths.get(MINECRAFT_DIR, "natives"));
                        command.add("-cp");
                        command.add(buildClasspath());

                        command.add("net.fabricmc.loader.impl.game.minecraft.MinecraftGameProvider");
                        command.addAll(buildGameArguments(username, resolution, fullscreen));

                        // Launch process
                        launchMinecraftProcess(command);
                        return null;
                    }

                    private void updateProgress(double v) {
                    }
                };
            }
        };

        gameLauncher.setOnSucceeded(e -> {
            isGameRunning.set(false);
            updateUIAfterGameExit(true);
        });

        gameLauncher.setOnFailed(e -> {
            isGameRunning.set(false);
            Throwable ex = gameLauncher.getException();
            log("Oyun başlatma hatası: " + (ex != null ? ex.getMessage() : "Bilinmeyen hata"));
            updateUIAfterGameExit(false);
        });

        gameLauncher.start();
    }

    // Helper method to get Java path
    private String getJavaPath() {
        String customJavaPath = config.getProperty("javaPath");
        if (customJavaPath != null && !customJavaPath.isEmpty() && Files.exists(Paths.get(customJavaPath))) {
            return customJavaPath;
        }
        String defaultPath = System.getProperty("java.home") + File.separator + "bin" + File.separator +
                (System.getProperty("os.name").toLowerCase().contains("win") ? "javaw.exe" : "java");
        if (!Files.exists(Paths.get(defaultPath))) {
            throw new IllegalStateException("Java executable not found: " + defaultPath);
        }
        return defaultPath;
    }

    // Helper method to build classpath
    private String buildClasspath() {
        StringBuilder classpath = new StringBuilder();
        for (String libPath : minecraftLibraries.values()) {
            classpath.append(libPath).append(File.pathSeparator);
        }
        classpath.append(Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".jar"));
        classpath.append(File.pathSeparator);
        classpath.append(Paths.get(MINECRAFT_DIR, "versions", MC_VERSION + "-fabric-" + FABRIC_VERSION, GAME_JAR));
        return classpath.toString();
    }

    // Helper method to build game arguments
    private List<String> buildGameArguments(String username, String resolution, boolean fullscreen) {
        List<String> args = new ArrayList<>();
        args.addAll(Arrays.asList(
                "--username", username,
                "--version", MC_VERSION,
                "--gameDir", MINECRAFT_DIR,
                "--assetsDir", Paths.get(MINECRAFT_DIR, "assets").toString(),
                "--assetIndex", MC_VERSION,
                "--uuid", UUID.randomUUID().toString().replace("-", ""),
                "--accessToken", "0",
                "--userType", "mojang",
                "--versionType", "release"
        ));

        if (fullscreen) {
            args.add("--fullscreen");
        } else {
            String[] res = resolution.split("x");
            if (res.length == 2) {
                args.add("--width");
                args.add(res[0].trim());
                args.add("--height");
                args.add(res[1].trim());
            }
        }

        // Add additional game arguments from config
        if (Boolean.parseBoolean(config.getProperty("showFPS", "true"))) {
            args.add("--showFPS");
        }
        if (Boolean.parseBoolean(config.getProperty("enableVBO", "true"))) {
            args.add("--vbo");
        }

        // Add volume settings
        args.add("--volume");
        args.add(config.getProperty("masterVolume", "80"));
        args.add("--musicVolume");
        args.add(config.getProperty("musicVolume", "60"));

        return args;
    }

    // Helper method to launch Minecraft process
    private void launchMinecraftProcess(List<String> command) throws IOException, InterruptedException {
        updateStatus("Minecraft başlatılıyor...");
        log("Komut: " + String.join(" ", command));

        ProcessBuilder pb = new ProcessBuilder(command);
        pb.directory(new File(MINECRAFT_DIR));
        pb.redirectErrorStream(true);

        Process process = pb.start();

        // Monitor process output
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                log("Minecraft: " + line);
            }
        }

        // Wait for process to complete
        int exitCode = process.waitFor();
        log("Minecraft çıkış kodu: " + exitCode);

        if (exitCode != 0) {
            throw new IOException("Minecraft beklenmeyen bir şekilde kapandı, çıkış kodu: " + exitCode);
        }

        // Handle launcher behavior
        if (!Boolean.parseBoolean(config.getProperty("keepLauncherOpen", "true"))) {
            Platform.runLater(() -> {
                saveConfig();
                Platform.exit();
                System.exit(0);
            });
        }
    }

    // Helper method to update UI after game exit
    private void updateUIAfterGameExit(boolean success) {
        Platform.runLater(() -> {
            if (success) {
                updateStatus("Oyun kapandı");
                updateProgress(1.0);
            } else {
                updateStatus("Oyun başlatılamadı");
                updateProgress(0.0);
                showError("Oyun başlatılırken bir hata oluştu, lütfen logları kontrol edin.");
            }
            playBtn.setDisable(false);
            playBtn.setText("OYNA");
        });
    }

    //region Additional Utility Methods
    private void initializeNativeLibraries() {
        try {
            updateStatus("Native kütüphaneler hazırlanıyor...");
            Path nativesDir = Paths.get(MINECRAFT_DIR, "natives");
            Files.createDirectories(nativesDir);

            JSONObject versionJson = new JSONObject(minecraftVersionJson);
            JSONArray libraries = versionJson.getJSONArray("libraries");
            for (int i = 0; i < libraries.length(); i++) {
                JSONObject library = libraries.getJSONObject(i);
                if (library.has("downloads") && library.getJSONObject("downloads").has("classifiers")) {
                    JSONObject classifiers = library.getJSONObject("downloads").getJSONObject("classifiers");
                    if (classifiers.has("natives-windows")) {
                        JSONObject nativeLib = classifiers.getJSONObject("natives-windows");
                        String url = nativeLib.getString("url");
                        String path = nativeLib.getString("path");
                        String sha1 = nativeLib.getString("sha1");
                        Path targetPath = nativesDir.resolve(path);

                        if (!Files.exists(targetPath) || !verifyFileChecksum(targetPath, sha1)) {
                            downloadFile(url, targetPath);
                            if (!verifyFileChecksum(targetPath, sha1)) {
                                log("Native kütüphane doğrulama hatası: " + path);
                                continue;
                            }
                            // Extract native library
                            extractZip(targetPath, nativesDir);
                            Files.deleteIfExists(targetPath);
                        }
                    }
                }
            }
            log("Native kütüphaneler hazırlandı");
        } catch (Exception e) {
            log("Native kütüphaneler hazırlanamadı: " + e.getMessage());
        }
    }

    private void validateInstallation() {
        try {
            updateStatus("Kurulum doğrulanıyor...");
            Path versionDir = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION);
            Path fabricJar = Paths.get(MINECRAFT_DIR, "versions", GAME_JAR);
            Path mcJar = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".jar");
            Path versionJson = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION, MC_VERSION + ".json");

            if (!Files.exists(versionDir) || !Files.exists(fabricJar) || !Files.exists(mcJar) || !Files.exists(versionJson)) {
                throw new IOException("Eksik kurulum dosyaları");
            }

            // Validate libraries
            for (String libPath : minecraftLibraries.values()) {
                if (!Files.exists(Paths.get(libPath))) {
                    throw new IOException("Eksik kütüphane: " + libPath);
                }
            }

            log("Kurulum doğrulandı");
        } catch (Exception e) {
            log("Kurulum doğrulama hatası: " + e.getMessage());
            handleInstallationError("Kurulum doğrulama başarısız: " + e.getMessage());
        }
    }

    private void repairInstallation() {
        try {
            updateStatus("Kurulum onarılıyor...");
            // Delete corrupted directories
            Path versionDir = Paths.get(MINECRAFT_DIR, "versions", MC_VERSION);
            Path nativesDir = Paths.get(MINECRAFT_DIR, "natives");
            if (Files.exists(versionDir)) {
                deleteDirectory(versionDir);
            }
            if (Files.exists(nativesDir)) {
                deleteDirectory(nativesDir);
            }

            // Re-run installation
            performGameInstallation();
            log("Kurulum onarıldı");
        } catch (Exception e) {
            log("Kurulum onarma hatası: " + e.getMessage());
            handleInstallationError("Kurulum onarılamadı: " + e.getMessage());
        }
    }
    //endregion

    //region Event Handlers
    private void handleWindowResize() {
        primaryStage.widthProperty().addListener((obs, oldVal, newVal) -> {
            // Adjust UI components dynamically
            double newWidth = newVal.doubleValue();
            if (newsItemsContainer != null) {
                newsItemsContainer.setPrefWidth(Math.max(200, newWidth * 0.25));
            }
        });

        primaryStage.heightProperty().addListener((obs, oldVal, newVal) -> {
            // Adjust console height
            if (consoleArea != null) {
                consoleArea.setPrefHeight(Math.max(100, newVal.doubleValue() * 0.2));
            }
        });
    }

    private void setupEventHandlers() {
        // Handle window drag
        final Delta dragDelta = new Delta();
        root.setOnMousePressed(e -> {
            dragDelta.x = primaryStage.getX() - e.getScreenX();
            dragDelta.y = primaryStage.getY() - e.getScreenY();
        });
        root.setOnMouseDragged(e -> {
            primaryStage.setX(e.getScreenX() + dragDelta.x);
            primaryStage.setY(e.getScreenY() + dragDelta.y);
        });

        // Handle window resize events
        handleWindowResize();

        // Handle username validation
        usernameField.textProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal.length() > 16 || newVal.contains(" ")) {
                usernameField.setText(oldVal);
                showError("Kullanıcı adı 16 karakterden uzun olamaz ve boşluk içeremez!");
            }
        });
    }
    //endregion
}
